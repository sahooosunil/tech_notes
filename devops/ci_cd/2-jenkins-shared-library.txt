### What is a Jenkins Shared Library?

A **Jenkins Shared Library** is a way to reuse code in multiple Jenkins pipelines. 
Instead of duplicating pipeline code across different jobs or projects, you can centralize the reusable code in a shared library, 
making it easier to maintain and update. Shared libraries can contain custom pipeline steps, utilities, and other common code that you want to reuse across Jenkinsfiles.

Shared libraries allow you to:

- Share common code across different Jenkinsfiles.
- Reduce duplication and make pipelines more maintainable.
- Organize pipeline code in a modular way.
- Use Groovy-based scripts and classes for complex logic.

### Why is it used?

- **Reusability**: Shared libraries help avoid code duplication by allowing code to be written once and reused in multiple Jenkinsfiles.
- **Modularity**: You can break down complex pipelines into smaller, reusable parts.
- **Maintainability**: Updating a shared library in one place can propagate the changes to all Jenkinsfiles using that library.
- **Parameterization**: Shared libraries can be parameterized to be used dynamically based on inputs, making them flexible for various use cases.

### Example: Parameterized Jenkins Shared Library with Different Use Cases

Let's create a parameterized shared library and demonstrate how it can be used in different ways.

#### Step 1: Create the Shared Library

Create the following structure in your Jenkins repository:

```
/vars
    └── deployApp.groovy
/src
    └── org/jenkinsci/
        └── DeployService.groovy
```

**/vars/deployApp.groovy** (Reusable Step):
```groovy
def call(String appName, String environment) {
    echo "Deploying ${appName} to ${environment}"
    
    if (environment == 'production') {
        echo "Production environment requires additional steps"
        // Add production-specific logic here
    }
    else {
        echo "Non-production environment"
        // Add non-production logic here
    }
}
```

This `deployApp` step takes two parameters: `appName` (the name of the application to deploy) and `environment` (the environment to deploy to, such as 'production' or 'staging').

#### Step 2: Use the Shared Library in Jenkinsfiles

Now let's use the shared library in different Jenkinsfiles with various use cases.

**Jenkinsfile for Production Deployment**:
```groovy
@Library('my-shared-library') _

pipeline {
    agent any
    stages {
        stage('Deploy to Production') {
            steps {
                deployApp('MyApp', 'production')
            }
        }
    }
}
```

**Jenkinsfile for Staging Deployment**:
```groovy
@Library('my-shared-library') _

pipeline {
    agent any
    stages {
        stage('Deploy to Staging') {
            steps {
                deployApp('MyApp', 'staging')
            }
        }
    }
}
```

#### Step 3: Parameterized Use Case - Multiple Environments

You can further parameterize the shared library step to make it more dynamic.

**Updated `deployApp.groovy` with parameterized environment**:
```groovy
def call(Map params) {
    String appName = params.appName
    String environment = params.environment
    String version = params.version ?: 'latest'  // Default to 'latest' if no version is provided

    echo "Deploying ${appName} version ${version} to ${environment}"

    if (environment == 'production') {
        echo "Production environment requires additional steps"
        // Add production-specific logic here
    } else {
        echo "Non-production environment"
        // Add non-production logic here
    }
}
```

**Jenkinsfile for Deploying with Version**:
```groovy
@Library('my-shared-library') _

pipeline {
    agent any
    parameters {
        string(name: 'APP_VERSION', defaultValue: '1.0.0', description: 'Version of the app to deploy')
    }
    stages {
        stage('Deploy to Production') {
            steps {
                deployApp(appName: 'MyApp', environment: 'production', version: params.APP_VERSION)
            }
        }
    }
}
```

**Jenkinsfile for Deploying to Staging with Version**:
```groovy
@Library('my-shared-library') _

pipeline {
    agent any
    parameters {
        string(name: 'APP_VERSION', defaultValue: '1.0.0', description: 'Version of the app to deploy')
    }
    stages {
        stage('Deploy to Staging') {
            steps {
                deployApp(appName: 'MyApp', environment: 'staging', version: params.APP_VERSION)
            }
        }
    }
}
```

### Benefits of This Approach

1. **Code Reusability**: The `deployApp` function is used in both production and staging deployments with minimal code duplication.
2. **Customization**: Different environments can be customized by passing the `environment` parameter (e.g., 'production' or 'staging').
3. **Version Control**: The `version` parameter allows specifying different versions of the application for deployment.
4. **Flexibility**: This setup allows teams to easily modify deployment logic without touching individual Jenkinsfiles.

### Conclusion

Jenkins Shared Libraries allow for centralized, reusable, and maintainable pipeline code. Parameterized shared libraries make the deployment process flexible and allow different environments or configurations to be handled dynamically. The example demonstrates how shared libraries can be parameterized for different use cases, such as deploying applications to various environments with specific versions.
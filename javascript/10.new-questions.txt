### 1. **What is Function Currying in JavaScript?**  
Function **currying** is the process of transforming a function with multiple arguments into a series of nested functions, each taking one argument at a time. 
It allows partial application, meaning you can pass arguments one by one instead of all at once.  

ðŸ”¹ **Example:**  
```js
// Normal function
function add(a, b, c) {
  return a + b + c;
}
console.log(add(1, 2, 3)); // Output: 6

// Curried version
function curriedAdd(a) {
  return function(b) {
    return function(c) {
      return a + b + c;
    };
  };
}

console.log(curriedAdd(1)(2)(3)); // Output: 6
```

ðŸ”¹ **Use Case:**  
- Currying helps in creating reusable functions and handling configuration easily.  
- Example: Creating a utility to calculate the volume of different shapes by fixing some dimensions:  
```js
const volume = (length) => (width) => (height) => length * width * height;
const volumeOfCube = volume(3)(3)(3); // Output: 27
```

---

### 2. **Difference Between Normal Function and Arrow Function**  

| Feature           | **Normal Function**                               | **Arrow Function**                                 |
|-------------------|---------------------------------------------------|----------------------------------------------------|
| **Syntax**        | `function greet() {}`                             | `const greet = () => {}`                           |
| **'this' Binding**| Uses its own `this` context                       | Lexically binds `this` from the surrounding scope   |
| **Constructor**   | Can be used as a constructor (`new` keyword)       | Cannot be used as a constructor                     |
| **Hoisting**      | Hoisted to the top                                | Not hoisted; behaves like a variable declaration    |
| **Arguments Object**| Has access to `arguments` object                 | Does not have its own `arguments` object             |

ðŸ”¹ **Example of 'this' Binding Difference:**  
```js
// Normal Function
function NormalFunction() {
  console.log(this); // Refers to the object calling the function
}
new NormalFunction(); // Outputs the instance of NormalFunction

// Arrow Function
const ArrowFunction = () => {
  console.log(this); // Lexical scope, refers to the parent scope's this
};
ArrowFunction(); // Outputs the global object (window in browser)
```

ðŸ”¹ **Example of Arguments Object Difference:**  
```js
// Normal Function
function sum() {
  console.log(arguments);
}
sum(1, 2, 3); // Outputs: [1, 2, 3]

// Arrow Function
const sumArrow = () => {
  console.log(arguments);
};
sumArrow(1, 2, 3); // Error: arguments is not defined
```
example----
function normalFunction() {
  console.log(this);
}

normalFunction(); // In a browser, this will log the global object (window)
---
const obj = {
  name: "Alice",
  greet: function() {
    console.log(this.name); // 'this' refers to the 'obj' object
  }
};

obj.greet(); // Logs "Alice"
---

const obj = {
  name: "Alice",
  greet: () => {
    console.log(this.name); // 'this' does not refer to 'obj', it refers to the enclosing context
  }
};

obj.greet(); // Logs 'undefined', because 'this' refers to the global object (in a browser, window)


---

### 3. **Object Destructuring and Array Destructuring**  
**Destructuring** allows you to unpack values from arrays or properties from objects into distinct variables.  

---

#### **Object Destructuring**  
ðŸ”¹ **Basic Example:**  
```js
const person = { name: "Hari", age: 33 };
const { name, age } = person;
console.log(name, age); // Output: Hari 33
```

ðŸ”¹ **Using Aliases:**  
```js
const person = { name: "Hari", age: 33 };
const { name: fullName, age: years } = person;
console.log(fullName, years); // Output: Hari 33
```

ðŸ”¹ **Default Values:**  
```js
const person = { name: "Hari" };
const { name, age = 30 } = person;
console.log(name, age); // Output: Hari 30
```

ðŸ”¹ **Nested Objects:**  
```js
const user = { name: "Hari", address: { city: "Hyderabad", zip: 500001 } };
const {
  name,
  address: { city, zip }
} = user;
console.log(city, zip); // Output: Hyderabad 500001
```

ðŸ”¹ **Function Parameters Destructuring:**  
```js
const displayUser = ({ name, age }) => {
  console.log(`Name: ${name}, Age: ${age}`);
};
displayUser({ name: "Hari", age: 33 });
```

---

#### **Array Destructuring**  
ðŸ”¹ **Basic Example:**  
```js
const numbers = [1, 2, 3];
const [first, second, third] = numbers;
console.log(first, second, third); // Output: 1 2 3
```

ðŸ”¹ **Skipping Elements:**  
```js
const numbers = [1, 2, 3, 4];
const [first, , third] = numbers;
console.log(first, third); // Output: 1 3
```

ðŸ”¹ **Rest Pattern:**  
```js
const numbers = [1, 2, 3, 4];
const [first, ...rest] = numbers;
console.log(rest); // Output: [2, 3, 4]
```

ðŸ”¹ **Swapping Variables:**  
```js
let a = 1, b = 2;
[a, b] = [b, a];
console.log(a, b); // Output: 2 1
```

ðŸ”¹ **Nested Arrays:**  
```js
const numbers = [1, [2, 3]];
const [one, [two, three]] = numbers;
console.log(two, three); // Output: 2 3
```

---

### 4. **What is a Pure Function in JavaScript?**  
A **pure function** is a function that:  
1. **Returns the same output** for the same input.  
2. **Has no side effects** (does not modify external state or variables).  

ðŸ”¹ **Example of Pure Function:**  
```js
const add = (a, b) => a + b;
console.log(add(2, 3)); // Output: 5
```

ðŸ”¹ **Example of Impure Function:**  
```js
let num = 10;
const addImpure = (x) => num + x;
console.log(addImpure(5)); // Output depends on the external variable 'num'
```

ðŸ”¹ **Benefits of Pure Functions:**  
- **Predictable and Testable** â€“ Always returns the same output for the same input.  
- **Easy to Debug** â€“ No side effects or state dependencies.  
- **Functional Programming** â€“ Encourages a functional programming paradigm.  

---

### 5. **What are First-Class Functions in JavaScript?**  
In JavaScript, **first-class functions** mean that functions are treated as **first-class citizens**. Functions can:  
1. **Be assigned to variables**  
2. **Be passed as arguments**  
3. **Be returned from other functions**  

ðŸ”¹ **Example:**  
```js
// Assigning to a variable
const greet = function(name) {
  return `Hello, ${name}!`;
};
console.log(greet("Hari")); // Output: Hello, Hari!

// Passing as an argument
const sayHello = (greetFunction, name) => {
  console.log(greetFunction(name));
};
sayHello(greet, "Hari"); // Output: Hello, Hari!

// Returning from a function
const createMultiplier = (multiplier) => {
  return (num) => num * multiplier;
};
const double = createMultiplier(2);
console.log(double(5)); // Output: 10
```

ðŸ”¹ **Why Use First-Class Functions?**  
- **Higher-order functions** like `map`, `filter`, and `reduce` are made possible.  
- **Callbacks and Promises** rely on first-class functions for asynchronous programming.  

---

### **Summary**  
1. **Function Currying** â€“ Breaking down functions into multiple calls with one argument each.  
2. **Normal vs Arrow Function** â€“ `this` binding, constructor usage, and `arguments` object differences.  
3. **Object & Array Destructuring** â€“ Extracting values into variables in a cleaner way.  
4. **Pure Functions** â€“ Deterministic and side-effect-free functions for functional programming.  
5. **First-Class Functions** â€“ Functions as variables, arguments, and return values.  

Want more examples or explanations? Let me know! ðŸš€
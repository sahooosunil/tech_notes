Here‚Äôs a **complete Spring Boot application** that retrieves a **secret string** from **AWS Secrets Manager** using the AWS SDK.

---

### **1. Add Dependencies**
Add the required AWS SDK dependencies in your `pom.xml`:

```xml
<dependency>
    <groupId>software.amazon.awssdk</groupId>
    <artifactId>secretsmanager</artifactId>
    <version>2.20.101</version>
</dependency>
<dependency>
    <groupId>software.amazon.awssdk</groupId>
    <artifactId>sts</artifactId>
    <version>2.20.101</version>
</dependency>
```

---

### **2. Configure `application.yml`**
Modify `src/main/resources/application.yml`:

```yaml
aws:
  region: us-east-1   # Change this to your AWS region
  secret-name: mySecret   # Change this to your AWS Secret Name
  access-key: YOUR_AWS_ACCESS_KEY  # Optional (use IAM roles instead for security)
  secret-key: YOUR_AWS_SECRET_KEY  # Optional (use IAM roles instead for security)
```

üí° **Security Note:** Instead of hardcoding credentials, store them securely using:
- **Environment variables** (`AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`)
- **IAM roles** (recommended for EC2, ECS, EKS)

---

### **3. Create AWS Secrets Manager Service**
Create `AWSSecretService.java` to fetch the secret from AWS:

```java
package com.example.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.secretsmanager.SecretsManagerClient;
import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueRequest;
import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueResponse;

@Service
public class AWSSecretService {

    private final SecretsManagerClient secretsManagerClient;
    
    @Value("${aws.secret-name}")
    private String secretName;

    public AWSSecretService(@Value("${aws.region}") String region,
                            @Value("${aws.access-key:}") String accessKey,
                            @Value("${aws.secret-key:}") String secretKey) {

        SecretsManagerClient.Builder clientBuilder = SecretsManagerClient.builder()
                .region(Region.of(region));

        // Use static credentials if provided, otherwise use default credentials
        if (!accessKey.isEmpty() && !secretKey.isEmpty()) {
            clientBuilder.credentialsProvider(
                    StaticCredentialsProvider.create(AwsBasicCredentials.create(accessKey, secretKey))
            );
        } else {
            clientBuilder.credentialsProvider(DefaultCredentialsProvider.create());
        }

        this.secretsManagerClient = clientBuilder.build();
    }

    public String getSecretValue() {
        GetSecretValueRequest request = GetSecretValueRequest.builder()
                .secretId(secretName)
                .build();

        GetSecretValueResponse response = secretsManagerClient.getSecretValue(request);
        return response.secretString();
    }
}
```

üìå **Notes:**
- **Static Credentials (Not Recommended):** If `aws.access-key` and `aws.secret-key` are present, it uses them.
- **IAM Role (Recommended):** If credentials are **not provided**, it defaults to IAM role authentication.

---

### **4. Create REST Controller**
Create `SecretController.java` to expose an API endpoint:

```java
package com.example.controller;

import com.example.service.AWSSecretService;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class SecretController {

    private final AWSSecretService awsSecretService;

    public SecretController(AWSSecretService awsSecretService) {
        this.awsSecretService = awsSecretService;
    }

    @GetMapping("/get-secret")
    public String getSecret() {
        return awsSecretService.getSecretValue();
    }
}
```

---

### **5. IAM Permissions (Policy for AWS Secrets Manager)**
Ensure your IAM user or role has **Secrets Manager permissions**:

```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "secretsmanager:GetSecretValue",
      "Resource": "arn:aws:secretsmanager:us-east-1:123456789012:secret:mySecret-*"
    }
  ]
}
```

---

### **6. Running the Application**
#### **1Ô∏è‚É£ Run Spring Boot App**
Start your application using:

```sh
mvn spring-boot:run
```

#### **2Ô∏è‚É£ Call API to Retrieve Secret**
Make a GET request to:

```
http://localhost:8080/get-secret
```

üí° The API will return the secret stored in **AWS Secrets Manager**.

---

### **Alternative: Use Spring Cloud AWS**
If you prefer **Spring Cloud AWS**, add:

```xml
<dependency>
    <groupId>io.awspring.cloud</groupId>
    <artifactId>spring-cloud-aws-starter-secrets-manager</artifactId>
    <version>2.4.2</version>
</dependency>
```

Modify `application.yml`:

```yaml
spring:
  config:
    import: aws-secretsmanager:
aws:
  region: us-east-1
```

Then, directly inject secrets in code:

```java
@Value("${my.secret}")
private String mySecret;
```

---

### **Final Summary**
‚úî **Spring Boot App** fetches AWS secrets using AWS SDK  
‚úî **SecretsManagerClient** dynamically retrieves secrets  
‚úî **IAM Role (recommended)** or **Static Credentials** for authentication  
‚úî **Spring Cloud AWS** can auto-load secrets into properties  

Let me know if you need help with **deploying to Kubernetes, ECS, or AWS Lambda!** üöÄ
What is Kubernetes Namespace, what is the purpose of it?
Namespaces are used for creating logical group of objects/resources on the Kubernetes cluster that can be isolated from one project or domain or business from other, so that we can share the same cluster to multiple teams or business units.
	
Kubernetes administrator creates users/groups and assigns them to the namespaces restricting the users to access, manage the resources/objects of a namespace securely.
	
There are 4 namespaces are there by default when we install kubernetes cluster
1. default         = all the objects/resource that we create on cluster by default will be created on "default" namespace. default name is empty. all the users/groups on cluster by default have access to the objects/resources of default namespace
2. kube-system     = kubernetes system objects like api manager, controller manager, etcd, scheduler etc are created under kube-system namespace
3. kube-public     = by default it is empty and all the objects/resources under this namespace can be accessed by anyone publicly
4. kube-node-lease = leased objects are placed under this namespace

1. all the namespaces on the cluster?
kubectl get ns

2. how to create a namespace?
kubectl create ns namespace

3. how to delete a namespace?
kubectl delete ns namespace

4. how to see pods under a specific namespace?
kubectl get pods -n namespace

5. how to see all the pods on all the namespaces of the cluster?
kubectl get pods -A
--------------------------------------------------------------------------------------------------------------------------------
How does the kubectl will be configured to access the kubernetes cluster?
	
AWS EKS Cluster Kubectl configuration:
Incase of AWS EKS Cluster, the aws cli has provided an cli command through which we can setup the kubectl pointing to the eks cluster as below.	
	
aws eks update-kubeconfig --region regionName --cluster clusterName

Before running the above aws cli command, we need to have an IAM user attached with EKS Cluster Fullaccess policy. Then configure the credentials (apikey/secretkey) of the user on the workstation, so that we can run the above command.
	
on-premise or add kubernetes cluster to the kubectl using kubectl command:
kubectl config --kubeconfig=config set-cluster clusterName --server http://host:port --insecure-skip-tls-verify


The Kubernetes cluster information will be stored by default under $USER_HOME/.kube/config file. It has majorly 3 sections in it
1. clusters  = clusters section lists all the kubernetes clusters, incase of https (ssl enabled), their certificate key data that should used for communicating with the cluster also will be captured.
2. users     = all the users of different clusters are listed here, using these users we will connect to the clusters
3. contexts  = a context is a name give for the combination of cluster, user and the namespace of the cluster that should be accessed. using this context the kubectl connects and manages the cluster

$HOME/.kube/config

apiVersion: v1
kind: config
preferences: {}
clusters:
	- cluster:
    name: developmentcluster
		server: http://localhost:port
		certificate-authority-data: key
	- cluster:
    name: stagecluster
		server: http://localhost:port
		certificate-authority-data: key
users:
  - name: devclusteruser
	  user:
      client-certificate-data:
      client-key-data:
  - name: stageclusteruser
	  user:
      client-certificate-data:
      client-key-data:
contexts:
  - context:
    name: devcontext
		  cluster: developmentcluster
			user: devclusteruser
			namespace: default
	- context:
    name: stagecontext
		  cluster: stagecluster
			user: stageclusteruser
			namespace: testnamespace
current-context: devcontext

The kubeconfig file	can be managed, modified or queries in 2 ways
1. through texteditor manually = if we are aware of the syntaxes and semantics of the kubeconfig file, then we can manually go and edit the config file using the text editor like adding a new cluster or delete cluster or switching the context can be done directly

2. kubectl cli commands
Instead of manually modifiying the kubeconfig file which could lead to syntax errors, we can make use of the cli config commands that are provided by kubectl 


1. How to switch from one cluster to another cluster by changing the context?
To switch from one cluster to another we can open the USER_HOME/.kube/config file in any of the text editor and change the property current-context directly pointing to the cluster context you wanted to use against.
	
or

kubectl config use-context contextname

2. How to see the current-context in which the kubectl is pointing to?
kubectl config current-context

2. How to see the kubeconfig file
kubectl config view 
(or)
cat ~/.kube/config

3. How to see all the configs in the kubeconfig file?
kubectl config get-contexts

4. How to change the namespace of a context?
kubectl config set-context --current  --namespace=namespacename

5. How to add a new kubernetes cluster information in .kube/config file?
There are 2 ways we can add cluster information into the .kube/config file
1. modify the ~/.kube/config file manually and add the cluster information into it
2. use set-cluster in kubectl cli commands

kubectl config --kubeconfig=config set-cluster prod --server http://host:port --insecure-skip-tls-verify
--------------------------------------------------------------------------------------------------------------------------------

How to install minikube on ubuntu?
1. create an oracle virtualbox virtual machine with 
	cpus: 2
	memory: 6gb
  hdd: 25gb
	operating system: ubuntu desktop
	
2. install docker on the ubuntu virtual machine
sudo apt update -y
sudo apt install apt-transport-https ca-certificates curl software-properties-common
sudo apt install -y docker.io

3. add $USER to the docker group
sudo usermod -aG docker $USER

4. restart the ubuntu vm
sudo init 6
		
5. verify the docker is working or not
docker version

6. download the minikube binary
goto https://minikube.sigs.k8s.io/docs/start/
under installation section choose the operating system, architecture, releaseType and installerType
operating system: Linux
Architecture: x86-64
Release Type: stable
Installer Type: debian package

curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
sudo apt install -f ./minikube_latest_amd64.deb

rm minikube_latest_amd64.deb

7. start the minikube cluster
minikube start

minikube pause = pause the cluster
minikube unpause = resumes the cluster
minikube stop = stops the cluster

upon setting up and starting the minikube cluster, it automatically creates an kubeconfig file pointing the kubectl to the cluster, along with that the minikube ships an kubectl with it that can be used using
minikube kubectl ..
	
	

8. Let us install an standalone kubectl 
download the kubectl binary using the below cURL
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
	
9. create an bin directory under the $USER_HOME
mkdir ~/bin
mv kubectl ~/bin

10. modify the .bashrc to point the PATH variable to the ~/bin directory of the kubectl

if [ -f ~/bin/kubectl ]; then
	export PATH=$PATH:~/bin
fi
	
kubectl get pods

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	




































	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	























	
























			





































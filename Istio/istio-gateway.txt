### What is a Gateway and Why is it Required in Istio?

In Istio, a **Gateway** acts as an edge proxy, controlling how traffic enters the service mesh from outside the Kubernetes cluster. 
It allows you to manage and configure external traffic in the same way you manage internal traffic, applying Istio's features such as traffic routing, security, and monitoring.

#### Why is a Gateway Needed?

When you apply canary deployments within your cluster, the traffic routing (e.g., weighted routing for different versions) works because every pod has a sidecar proxy (like Envoy) injected. 
These proxies handle internal traffic and apply the canary or custom routing rules.

However, when external clients send requests to your application, these requests do not pass through the internal proxy containers by default. 
  Instead, they come directly to the application, bypassing Istio’s traffic management features like canary deployments. 

To ensure that external traffic can leverage Istio’s capabilities, we need an entry point proxy, which is where the **Istio Ingress Gateway** comes into play. The Ingress Gateway acts as the front-facing proxy for all incoming external traffic. It enforces routing, security policies, and other Istio features before the traffic reaches the internal services.

### Example Configuration

Below is an example of how to configure an Istio Gateway along with a VirtualService and DestinationRule for a canary deployment:

```yaml
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: ingress-gateway-configuration
spec:
  selector:
    istio: ingressgateway  # Use Istio's default ingress gateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "sunil.com"  # Accept traffic for all domain names (you can specify a domain if needed)
---
kind: VirtualService
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: fleetman-webapp
  namespace: default
spec:
  hosts:
    - fleetman-staff-service.default.svc.cluster.local #(internal domin / service name) ------------------------------
    - "sunil.com"  # external host name (your domain name) -----------------
  gateways:
    - ingress-gateway-configuration  # Link to the Gateway
  http:
    - route:
        - destination:
            host: fleetman-webapp  # Service name
            subset: original  # Subset for the original version
          weight: 90  # 90% traffic to the original version
        - destination:
            host: fleetman-webapp
            subset: experimental  # Subset for the experimental version
          weight: 10  # 10% traffic to the experimental version
---
kind: DestinationRule
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: fleetman-webapp
  namespace: default
spec:
  host: fleetman-webapp  # Service name
  subsets:
    - name: original
      labels:
        version: original  # Pods with the label "version: original"
    - name: experimental
      labels:
        version: experimental  # Pods with the label "version: experimental"
```

### Key Points
- **Gateway**: Acts as an entry point for external traffic, ensuring Istio’s features are applied to incoming requests.
- **VirtualService**: Defines routing rules for traffic coming through the Gateway.
- **DestinationRule**: Specifies subsets of pods (e.g., for canary deployments) and applies traffic policies like load balancing or routing.

By configuring the Gateway, VirtualService, and DestinationRule, you ensure that external traffic can benefit from Istio’s advanced traffic management features, such as canary deployments, even when coming from outside the cluster.
1. Pull-based architecture
The devops engineer writes the code module on the workstation of his computer and publishes/pushes it to the Control Node Server asking it to apply on Fleet Servers.
	
1.1 To connect to the Control Node Server and pass the code modules for execution, the ops engineer has to install an CLI tool (Knife) and configure it to talk to the Control Node Server

1.2 
-  The Central Node Server takes the code module and stores in the repository along with that it keeps track of which code modules are executed on which fleet servers and on whom those are pending for execution.
- Along with that what is the outcome of executing an code module on a Fleet Node is also managed by the Control Node Server in its repository.
- All the Fleet Servers should be pre-configured on the Control Node server allowing them to communicate with Control Node

1.3 Each Node on the Fleet should be installed with Agent Software and configured it to talk to the Control Node Server

Upon pushing an code module to the Control Node Server, it stores in the repository. The agent software on the Nodes of the Fleet periodically polls the ControlNode Server asking for any codemodules available for execution. downloads them on to the Nodes and executes them locally and returns the output of the execution back to the Control Node Server

Let us understand advantages/dis-advantages with this architecture:
advantages:-
	1. The agent node software within the fleet nodes pulls the code module from the control node server and executes them locally because of this the load on the control node server is very less. 
	2. The architecture is good enought to scale to any of the fleet size
	3. supports parallel execution of the code modules as each agent node is responsible for pulling and executing the code module independently, hence the performance would be very high
	4. we can schedule the execution of the code modules
	
dis-advantages:-
	1. If the Master/Control Node server goes down, the entire system/fleet would be down
	2. Migrating the Control node server is very difficult, because we need to reconfigure all the fleet servers in the organization to repoint to the new server we setup which is an tedious job
	3. Since the Control Node Server holds all the information about the fleet nodes in the organization, if it has been comprised the intruder/hacker gains access to the entire network fleet.
	4. On each fleet node we need to install agent software and configure it to talk to the Control Node server which is going to take lot of time in setting up the infra
	5. The ControlNode Server should be pre-configured with each node info on the fleet which is again a time consuming and complex job
	6. The whole architecture is very complex to understand and difficult to debug if something goes wrong.
		
2. Pushed-Based Architecture
-----------------------------
The software configuration management tools like Ansible/Puppet/Salt stack that works based on push-based architecture should be installed on the central server computer. The DevOps engineer writes the code modules on the local workstation and uses the central server software configuration management tool for executing them on the fleet servers of the infrastructure.
	
1. The Central Server computer on which the source code management tool that is running is stateless, It dont know any information about any of the fleet servers within the organization network. It doesnt keep track of the state of the fleet servers like hardware configuration or softwares being installed of what versions etc.
This makes us easy to switch or use any computer as an Central Server computer given if that machine has been installed with relevant software configuration management software 

2. The devops engineer authenticate himself with Central Server Computer and passes the code modules along with list of servers as an inventory asking to execute the code modules on the fleet.
	
3. The Central Server computer connects to each Fleet Server on the network specified in the inventoryList and copies the code modules onto the remote machine and executes them locally and captures the outcome of the execution and reports it back to the devops engineer 

since the code modules are being pushed and executed on the Fleet Servers, it is called "Push-based Architecture".
	
Advantages:-
1. Since the Software Configuration Tool that is running on Central Server Computer is stateless we can use any computer to act as an Central Computer to run the automation.
2. If the central server computer has been compromised there is no problem, because none of the information regarding the fleets are stored in central server
3. No need to install/configure the agent software on each node of the fleet. Along with that we dont need to configure the fleet servers information within the Central Server computer thus making the setup simple/quick
4. on-demand execution of the scripts/code modules would be supported by the push-based architecture
5. debugging the nodes of the cluster and monitoring them is very easy. Because there are no agents pulling the codemodules to execute rather the central server or scm software itself connects to each node to execute the codemodules, so incase of failure it would be communicated instantly
6. since the control of running the codemodules on the fleet exists with central server computer or scm software, we can have various roll-out strategies in running the code modules on the fleet.
	
Dis-Advantages:-
1. the architecture by itself cannot scale to handle large group of fleet servers within the organization
2. more fleet servers on the network, takes more time to apply the code modules
3. scheduled execution of the code modules is not supported since the central server instantly execute them upon requesting.
-------------------------------------------------------------------------------------------------------------------------------------
Ansible Architecture
--------------------
Ansible is an software configuration management tool that works based on push-based architecture using which we can run code modules on the infrastructure for installing/configuring the software packages on fleet servers of the organization. There are 5 core components are there in Ansible.
	
1. Ansible Modules
2. Ansible Control Node Server [Master]
3. Ansible Managed Nodes
4. Ansible Playbook
5. Inventory File


1. Ansible Module
Ansible modules are the reusable code-blocks/functions written in Python programming language by the Ansible developers and distributed them as part of the Ansible installation. These modules are pre-coded to perform a task or an operation and are written to enforce the idempotancy principle.
	
These modules will takes the data as an input, performs the operation and returns the output of executing the task on the machine. For eg.. an apt module takes the software packagename that has to be installed as an input, upon installing the software package it returns the output indicating the status of the execution like
	1. installed ok
	2. no change
	3. failed
	
	
2. Ansible Control Node Server
The Ansible control node server is the engine of the Ansible system/architecture. Any machine that is instaled with Ansible software can be called as Control Node Server. The Control Node server takes the playbook/module as an input along with data, then pushes/transfers/copies these modules onto the Managed Nodes and executes these modules local to the managed node. Then returns the output of executing the module back to the Control Node Server interms of JSON format and displays the outcome to the enduser.
1. The ControlNode Server is stateless, so that we can use any machine which is installed with Ansible as an control node server
2. All the machines on the Ansible cluster communicates with each other over SSH protocol, so that each node must be configured with SSH access and the communicate across the nodes is highly secured.
3. Ansible has provided an CLI tool through which devops engineers can talk to the Control Node Server asking for running the automation.
	
3. Ansible Managed Node
Ansible Managed Node is a Server or a Computer within in a Organization on whom we wanted to install/configure the software packages/libraries inorder to host/deploy/run the software applications.
3.1 on each managed node we need to install the openssh server	and should configure passwordless SSH access based on key-based authentication (Assymetric Authentication based on keys).
3.2 The user on all the managed nodes must be configured with password-less sudoers access (/etc/sudoers)
3.3 optionally install python on each ansible managed node


4. Ansible Playbook
For achieving the desired state of the system we might need to install/configure bunch of software packages and tools on the managed nodes of the infrastructure, so that those will be ready for deploying/running the software applications.
	
We can install/configure the software packages through ansible by executing ansible modules on the managed nodes of the cluster using Control Node Server. But to achieve the desired state of the system the ansible developer/devops engineer has to execute bunch of Ansible modules in a specific order by passing relevant inputs and gather output of the execution. based on the output he has to execute next course of module by passing the output of first module as an input to the second module. But running these modules manually in a specific order and orchestrating them is very difficult and time consuming job

Instead of the this the ansible developers can orchestrate these module executes by declaring them aspart of the playbook. A Playbook is an YAML file in which the ansible developer declares the ansible modules that has to executed in a specific order with their inputs. Now pass this playbook as an input to Control Node Server, so that is parses the playbook and executes the modules in specific order on the managed nodes to achieve the desired state of the system.
	
5. Inventory File
The Control Node Server is stateless, which means it doesnt know any of the information about the managed nodes that are part of the Ansible cluster. The ansible developer has to write an inventoryFile listing all the servers/machines on whom we want to apply or execute ansible playbooks/ansible modules to achieve the desired state.
Now along with passing the playbook even pass inventoryFile to the Control Node Server asking him to execute these modules on the managed nodes specified in the InventoryFile.
	
--------------------------------------------------------------------------------------------------------------------------------------

How to setup an Ansible Cluster?
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	































	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
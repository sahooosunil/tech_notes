### Responsibilities of Eureka Client

1. **Registration with Eureka Server:**
   - At startup, the microservice (acting as a Eureka client) automatically registers itself with the Eureka server. This involves sending its metadata, such as hostname, IP address, and service name, to the server.

2. **Sending Heartbeats:**
   - Every 30 seconds (by default), the Eureka client sends a heartbeat signal to the Eureka server. This signal lets the server know that the service is still alive and available.

3. **Re-registering on Server Restart:**
   - If the Eureka server crashes and restarts, it may respond with a 404 error when the Eureka client sends a heartbeat. In this case, the client automatically re-registers itself with the server to ensure it's part of the service registry again.

4. **Fetching Service Registry:**
   - Each Eureka client maintains a background thread that periodically fetches the registry of all registered microservices from the Eureka server. This information is cached locally, allowing the client to make service-to-service calls without constantly querying the server.

### Steps to Configure Eureka Client in Your Microservice

1. **Add Eureka Client Dependency:**
   - Include the following dependency in your `pom.xml`:

     ```xml
     <dependency>
         <groupId>org.springframework.cloud</groupId>
         <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
     </dependency>
     ```

2. **Annotate Main Class:**
   - Add `@EnableEurekaClient` in the main Spring Boot application class:

     ```java
     import org.springframework.boot.SpringApplication;
     import org.springframework.boot.autoconfigure.SpringBootApplication;
     import org.springframework.cloud.netflix.eureka.EnableEurekaClient;

     @SpringBootApplication
     @EnableEurekaClient
     public class MyApplication {
         public static void main(String[] args) {
             SpringApplication.run(MyApplication.class, args);
         }
     }
     ```

3. **Configure Eureka Server URL:** we have to configure eureka server url for eureka client, so that it can call and register itself.
   - Specify the Eureka server URL in your `application.yml` or `application.properties`:

     ```yaml
     eureka:
       client:
         service-url:
           defaultZone: http://localhost:8761/eureka/ # Replace with your Eureka server URL
     ```

4. **Successful Registration:**
   - When the application starts, it registers with the Eureka server. You can verify this in the logs and see the service listed on the Eureka dashboard.

5. **Shutdown Hook for Deregistration:**
   - A shutdown hook is automatically configured in the Eureka client. When the microservice shuts down, it sends a `DELETE` request to the Eureka server to deregister itself. This can be observed in the logs.
   - **Note:** If the machine crashes unexpectedly, the shutdown hook wonâ€™t execute. In such cases, the Eureka server waits for three missed heartbeats (default 90 seconds) before marking the service as down and removing it from the registry.

6. **Custom Instance ID:**
   - You can configure a custom instance ID for the Eureka client, which can be useful for identifying instances uniquely:

     ```yaml
     eureka:
       instance:
         instance-id: ${spring.application.name}:${random.value}
     ```

### Summary
- The Eureka client plays a crucial role in service discovery by registering with the Eureka server, sending heartbeats, and fetching the service registry.
- Proper configuration ensures seamless registration, deregistration, and resilience in case of server restarts or unexpected failures.
--------------------------------------------------------------------------
Eureka client vs Discovery client
----------------------------------
Discovery client is given from spring cloud (you can consider it as api)
Eureka client is a implementation of Discovery client.
tomorow if you dont want eureka client but you want to use consule then just change the depedency.
but you should always write your code with Discovery client and its related annotaions and logic. that how it will be loosly coupled.
@EnabelDiscoveryClient and @Autowire DiscoveryClient.


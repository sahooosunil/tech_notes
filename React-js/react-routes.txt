# **React Router DOM - A Complete Guide üöÄ**

## **1Ô∏è‚É£ What is React Router DOM?**
React Router DOM is a **library** that enables **navigation** between different pages (or views) in a React application without **reloading the page**. It uses the **History API** to manage routes efficiently.

### **Installation**
If you haven't installed it yet, run:
```sh
npm install react-router-dom
```

---

## **2Ô∏è‚É£ Setting Up Basic Routing**
### **Example: Basic Routes**
```jsx
import React from "react";
import { BrowserRouter as Router, Route, Routes, Link } from "react-router-dom";

const Home = () => <h2>Home Page</h2>;
const About = () => <h2>About Page</h2>;
const Contact = () => <h2>Contact Page</h2>;

function App() {
  return (
    <Router>
      <nav>
        <Link to="/">Home</Link> | <Link to="/about">About</Link> | <Link to="/contact">Contact</Link>
      </nav>

      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
        <Route path="/contact" element={<Contact />} />
      </Routes>
    </Router>
  );
}

export default App;
```
### **Explanation**
‚úî `BrowserRouter` wraps the application to enable routing.  
‚úî `Link` replaces `<a>` to avoid full page reload.  
‚úî `Routes` contains multiple `Route` components to define different paths.

---

## **3Ô∏è‚É£ Conditional Routes (Based on Conditions Like Login Status)**
Sometimes, we need to conditionally render components based on **authentication or other conditions**.

### **Example: Show Different Content for Logged-in Users**
```jsx
import React, { useState } from "react";
import { BrowserRouter as Router, Route, Routes, Link } from "react-router-dom";

const Home = () => <h2>Home Page</h2>;
const Dashboard = () => <h2>Welcome to Dashboard</h2>;
const Login = ({ onLogin }) => <button onClick={onLogin}>Login</button>;

function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  return (
    <Router>
      <nav>
        <Link to="/">Home</Link> | 
        {isAuthenticated ? <Link to="/dashboard">Dashboard</Link> : <Link to="/login">Login</Link>}
      </nav>

      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/login" element={<Login onLogin={() => setIsAuthenticated(true)} />} />
        {isAuthenticated && <Route path="/dashboard" element={<Dashboard />} />}
      </Routes>
    </Router>
  );
}

export default App;
```
### **Explanation**
‚úî If `isAuthenticated` is `true`, the **Dashboard link appears**.  
‚úî Otherwise, the **Login link is shown**.  
‚úî After clicking **Login**, `setIsAuthenticated(true)`, allowing access to Dashboard.

---

## **4Ô∏è‚É£ Private Routes (Role-Based Access from JWT Token)**
**Scenario:**  
- Users with **"admin" role** should access an **Admin Dashboard**.
- Users with **"user" role** should be redirected to **Home**.
- The role is **stored in localStorage** (from JWT token).

### **Step 1: Create a `PrivateRoute` Component**
```jsx
import React from "react";
import { Navigate, Outlet } from "react-router-dom";

const PrivateRoute = ({ allowedRoles }) => {
  // Simulating JWT stored in localStorage
  const user = JSON.parse(localStorage.getItem("user")); // Example: { role: "admin" }

  return user && allowedRoles.includes(user.role) ? <Outlet /> : <Navigate to="/" />;
};

export default PrivateRoute;
```

### **Step 2: Implement Private Routes in App**
```jsx
import React, { useEffect } from "react";
import { BrowserRouter as Router, Route, Routes, Link } from "react-router-dom";
import PrivateRoute from "./PrivateRoute";

const Home = () => <h2>Home Page</h2>;
const AdminDashboard = () => <h2>Admin Dashboard</h2>;
const UserDashboard = () => <h2>User Dashboard</h2>;

function App() {
  // Simulate setting a user role (normally comes from a JWT token)
  useEffect(() => {
    localStorage.setItem("user", JSON.stringify({ role: "admin" })); // Change to "user" to test
  }, []);

  return (
    <Router>
      <nav>
        <Link to="/">Home</Link> | 
        <Link to="/admin">Admin Dashboard</Link> | 
        <Link to="/user">User Dashboard</Link>
      </nav>

      <Routes>
        <Route path="/" element={<Home />} />
        
        {/* Private Route for Admins */}
        <Route element={<PrivateRoute allowedRoles={["admin"]} />}>
          <Route path="/admin" element={<AdminDashboard />} />
        </Route>

        {/* Private Route for Users */}
        <Route element={<PrivateRoute allowedRoles={["user"]} />}>
          <Route path="/user" element={<UserDashboard />} />
        </Route>
      </Routes>
    </Router>
  );
}

export default App;
```

### **Explanation**
‚úî `PrivateRoute` checks the **role** from `localStorage`.  
‚úî If the user has the correct role (`allowedRoles`), it **renders** the requested page.  
‚úî Otherwise, it **redirects** to `/`.

üî¥ **Test Case:** Change `localStorage.setItem("user", JSON.stringify({ role: "user" }))` and try accessing **Admin Dashboard** ‚Üí It should **redirect to Home**.

---

## **5Ô∏è‚É£ Handling 404 (Not Found) Routes**
To catch **undefined routes**, add a wildcard (`*`):

```jsx
<Route path="*" element={<h2>404 - Page Not Found</h2>} />
```

---

## **6Ô∏è‚É£ Redirect Example (After Login)**
You can redirect users **after login** using `<Navigate>`.

```jsx
import React, { useState } from "react";
import { BrowserRouter as Router, Routes, Route, Link, Navigate } from "react-router-dom";

const Home = () => <h2>Home Page</h2>;
const Dashboard = () => <h2>Welcome to Dashboard</h2>;
const Login = ({ onLogin }) => <button onClick={onLogin}>Login</button>;

function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  return (
    <Router>
      <nav>
        <Link to="/">Home</Link> | 
        {isAuthenticated ? <Link to="/dashboard">Dashboard</Link> : <Link to="/login">Login</Link>}
      </nav>

      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/login" element={isAuthenticated ? <Navigate to="/dashboard" /> : <Login onLogin={() => setIsAuthenticated(true)} />} />
        {isAuthenticated && <Route path="/dashboard" element={<Dashboard />} />}
      </Routes>
    </Router>
  );
}

export default App;
```

‚úî If `isAuthenticated` is `true`, visiting `/login` **redirects** to **Dashboard**.

---

## **7Ô∏è‚É£ Summary**
‚úÖ **Basic Routing** with `<Route>` and `<Routes>`.  
‚úÖ **Conditional Routes** (Show/hide pages based on state).  
‚úÖ **Private Routes** (Protect routes based on JWT role).  
‚úÖ **404 Handling** (`Route path="*"`).  
‚úÖ **Redirecting Users** (`<Navigate>` for automatic redirection).

Would you like to explore **dynamic routes (e.g., `/product/:id`), nested routes, or route animations** next? üöÄ
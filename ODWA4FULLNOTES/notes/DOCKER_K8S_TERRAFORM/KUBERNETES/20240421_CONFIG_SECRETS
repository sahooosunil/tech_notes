Config Secrets
---------------
ConfigSecret is an kubernetes object in which we store and manage sensitive information like credentials, ssh keys, encryption keys etc that acts as an Configuration Input for the software applications inorder to connect to the external resources/systems to perform operations.
	
In general we can store such application configuration aspart of the ConfigMap, but all the data that is stored inside the ConfigMap can be see by everyone who has access to the namespace on the cluster so that the information would not be secured and the resources/systems would be comprised. Inorder to store such sensitive data of an software application kubernetes has introduced ConfigSecrets.	
	
By default all the data that is stored in the ConfigSecret will not be encrypted, it will be encoded into base64 encoding format and will be stored, this means anyone can decode the data and can view the original information out of it. So to keep this information encrypted and secured we need to integrate kubernetes with vendor Vaults like Hashicorp so that all the Secrets data would be stored in Vault by the kubernetes in encrypted format, so that the information will not be compromised

To easily identify what type of secret is stored in the ConfigSecret, it is recommended to store the Type information about the secret even though it is optional. The kubernetes provided built-in or predefined secret types that can be attached while defining our own secrets

There are 7 built-in kubernetes secret types are provided
1. opaque = arbitary data. When we dont define type for a ConfigSecret, it by default assumes as opaque type
2. kubernetes.io/service-account-type=The service account token is a system secret or kubernetes secret
3. kubernetes.io/dockercfg = serialized format of the docker config file
4. kubernetes.io/dockerconfigjson = serialized format of the docker config json file
5. kubernetes.io/basic-auth=username/password
6. kubernetes.io/ssh-auth=ssh keys
7. kubernetes.io/tls=ssl keys or public/private encryption keys


We can use ConfigSecrets in 3 ways
1. we can pass secrets as environment variables or command-line arguments to the pod applications
2. We can mount ConfigSecrets as files on the pod container
3. The kubelet process itself uses these secrets for connecting to the docker container registry to authenticate and perform push/pull operations from the registry

How to create an ConfigSecret object for storing the credentials?
urotaxi-configsecret.yml
-------------------------
---
apiVersion: v1
kind: Secret
metadata:
  name: urotaxidbsecret
type: kubernetes.io/basic-auth
stringData:
  username: root
	password: welcome1
...
		

urotaxi-pod.yml
---------------
---
apiVersion: v1
kind: Pod
metadata:
  name: urotaxipod
spec:
  containers:
    - name: urotaxi
		  image: techsriman/urotaxi:1.0
			ports:
        - name: http
				  containerPort: 8080
					protocol: TCP
      env:
     		- name: "spring.datasource.username"
				  valueFrom:
            secretKeyRef:
              name: urotaxidbsecret
							key: username
				- name: "spring.datasource.password"			
					valueFrom:
            secretKeyRef:
              name: urotaxidbsecret
							key: password
...
-------------------------------------------------------------------------------------------------------------------------------
Types of Controllers
--------------------
There are 4 major components are there in the Kubernetes cluster
1. Control Plane or Master Node
2. Worker Node
3. Kubectl
4. etcd


There are 3 components are there in the Control Plane
1. Api manager          = it acts as an front-end/interface to the Kubernetes cluster, through which users will communicate with the cluster using Kubectl
2. Scheduler            = does the job of identifying appropriate workernode on whom the pod can be scheduled for execution
3. Controller Manager   = is an daemon process, that ensures always the kubernetes cluster meets the desired state


There are 5 types of Controllers are there
1. ReplicaSet
2. DeploymentSet
3. DaemonSet
4. Service
5. Job

Let us explore each of the controllers one after the another
--------------------------------------------------------------------------------------------------------------------------------
1. RepliaSet Controller
Pod is the smallest entity within the Kubernetes cluster in which one or more containers would be running together. These containers within the Pod may want to share common resources like bind volumes/mounts, FileSystem, Network resources etc and has lifecycle dependencies between them, due to which those are packaged and ran aspart of one single Pod.
	
When we create a Pod on the Kubernetes cluster, these pods has few characteristics within them
1. per one pod spec or manifest file we use, only on pod will be created on the cluster
2. Pod will not survive by crash = If a pod has been crashed due to any reason, the kubernetes cluster will not replace the pod

Let us say we want 5 replicas of a pod application to be running on the cluster, then we need to create 5 pod manifest files with each has unique name from the other and create thoese pods manually by running through each one, creating such a large replicas of pod manually one by one is difficult job and takes more time

In addition these #5 pods will not be represented as one application under 5 replicas, rather those are reported as 5 different pods in the cluster, so managing and monitoring them is very difficult

So to manage multiple pod replicas and to replace in the event of crash by monitoring them, the kubernetes has provided ReplicaSet controller

ReplicaSet Controller:
----------------------
A ReplicaSet controller can be imagined as an Reconcilation loop, the replicaset controller loops through all the workernodes of the cluster to identify whether the desired number of pod replicas are running on the cluster or not. If the desired number of pod replicas are not met, the ReplicaSet controller talks to the Scheduler asking to bring up the pods on the cluster to meet the desired state. If already the desired number of replicas are met, it goes into monitoring state to see if any pods has been crashed over the course of time, so that it can replace them with new pods

To create ReplicaSet controller we need to write ReplicaSet specfile similar to Pod spec file. Within in the ReplicaSet manifest/spec file we need to embedded the pod spec specifying how many replicas of this pod should be running. Without a pod spec a ReplicaSet spec is meaning less

Let us consider we have #4 worker nodes in the cluster and we created replicaset controller with desired number of replicas as 3. The control Plane or replicaset controller makes best efforts in distributing the 3 replicas across 3 different workernodes of the cluster for high availability. But there is no guarantee that always these replicas are running on unique nodes of the cluster.
	
speed application:

speed-replicaset.yml
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: speedreplicaset
	labels:
    env: dev
spec:
  replicas: 2
	selector:
    matchLabels: [through which we specify which pods should be running of the specified replicas]
      appName: speed
			version: 1
template: #pod template
  metadata:
    labels:
      appName: speed
			version: 1
	spec:
    containers:
      - name: speed
			  image: techsriman/speed:1.0
				ports:
          - name: http
					  containerPort: 8080
						protocol: TCP  
...
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	














































	
































		
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		






	






















	
	
### **SQL Joins Explained with Examples** üöÄ  

SQL **joins** are used to retrieve data from multiple tables based on a related column. They help combine rows from two or more tables into a single result set.  

---

## **1Ô∏è‚É£ Types of SQL Joins**
| Join Type | Description |
|-----------|------------|
| **INNER JOIN** | Returns matching records from both tables |
| **LEFT JOIN (LEFT OUTER JOIN)** | Returns all records from the left table and matching records from the right table |
| **RIGHT JOIN (RIGHT OUTER JOIN)** | Returns all records from the right table and matching records from the left table |
| **FULL JOIN (FULL OUTER JOIN)** | Returns all records from both tables (matches where possible) |
| **CROSS JOIN** | Returns the Cartesian product (all combinations of rows) |

---

### **Sample Tables**
#### **Table: Customers**
| customer_id | name  | city     |
|------------|-------|---------|
| 1          | John  | New York |
| 2          | Alice | London   |
| 3          | Bob   | Paris    |

#### **Table: Orders**
| order_id | customer_id | product  |
|----------|------------|-----------|
| 101      | 1          | Laptop    |
| 102      | 2          | Phone     |
| 103      | 4          | Headphones |

---

## **2Ô∏è‚É£ INNER JOIN**
üîπ **Returns only matching records from both tables**  

```sql
SELECT Customers.customer_id, Customers.name, Orders.order_id, Orders.product
FROM Customers
INNER JOIN Orders ON Customers.customer_id = Orders.customer_id;
```

‚úÖ **Output** (only matching records)  
| customer_id | name  | order_id | product  |
|------------|-------|---------|---------|
| 1          | John  | 101     | Laptop  |
| 2          | Alice | 102     | Phone   |

‚ùå **Bob (customer_id=3) and order_id=103 are not included** because there‚Äôs no match.  

---

## **3Ô∏è‚É£ LEFT JOIN (LEFT OUTER JOIN)**
üîπ **Returns all records from the left table and matching records from the right table**  

```sql
SELECT Customers.customer_id, Customers.name, Orders.order_id, Orders.product
FROM Customers
LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id;
```

‚úÖ **Output** (All customers, even if no orders)  
| customer_id | name  | order_id | product  |
|------------|-------|---------|---------|
| 1          | John  | 101     | Laptop  |
| 2          | Alice | 102     | Phone   |
| 3          | Bob   | NULL    | NULL    |

‚ùå **Bob has no matching order, so NULL appears for order_id and product.**  

---

## **4Ô∏è‚É£ RIGHT JOIN (RIGHT OUTER JOIN)**
üîπ **Returns all records from the right table and matching records from the left table**  

```sql
SELECT Customers.customer_id, Customers.name, Orders.order_id, Orders.product
FROM Customers
RIGHT JOIN Orders ON Customers.customer_id = Orders.customer_id;
```

‚úÖ **Output** (All orders, even if no customers exist)  
| customer_id | name  | order_id | product     |
|------------|-------|---------|------------|
| 1          | John  | 101     | Laptop     |
| 2          | Alice | 102     | Phone      |
| NULL       | NULL  | 103     | Headphones |

‚ùå **Order 103 has no matching customer, so NULL appears for customer_id and name.**  

---

## **5Ô∏è‚É£ FULL JOIN (FULL OUTER JOIN)**
üîπ **Returns all records from both tables, matching where possible**  

```sql
SELECT Customers.customer_id, Customers.name, Orders.order_id, Orders.product
FROM Customers
FULL JOIN Orders ON Customers.customer_id = Orders.customer_id;
```

‚úÖ **Output** (All records from both tables)  
| customer_id | name  | order_id | product     |
|------------|-------|---------|------------|
| 1          | John  | 101     | Laptop     |
| 2          | Alice | 102     | Phone      |
| 3          | Bob   | NULL    | NULL       |
| NULL       | NULL  | 103     | Headphones |

üîπ **Both missing matches (Bob and Order 103) appear with NULL values.**  

---

## **6Ô∏è‚É£ CROSS JOIN**
üîπ **Returns the Cartesian product (every combination of rows from both tables)**  

```sql
SELECT Customers.name, Orders.product
FROM Customers
CROSS JOIN Orders;
```

‚úÖ **Output** (Every possible combination)  
| name  | product     |
|-------|------------|
| John  | Laptop     |
| John  | Phone      |
| John  | Headphones |
| Alice | Laptop     |
| Alice | Phone      |
| Alice | Headphones |
| Bob   | Laptop     |
| Bob   | Phone      |
| Bob   | Headphones |

üìå **Use CROSS JOIN carefully** because it can generate huge datasets if tables have many rows.  

---

## **üìå Summary of Joins**
| Join Type | Matching Rows | Non-Matching Rows |
|-----------|--------------|-------------------|
| **INNER JOIN** | ‚úÖ Matches only | ‚ùå Excluded |
| **LEFT JOIN** | ‚úÖ Matches + all from Left | üî¥ NULL for unmatched Right |
| **RIGHT JOIN** | ‚úÖ Matches + all from Right | üî¥ NULL for unmatched Left |
| **FULL JOIN** | ‚úÖ Matches + all from both | üî¥ NULL for unmatched Left & Right |
| **CROSS JOIN** | üöÄ Every combination | üî¥ No matching required |

---

## **üìå When to Use Which Join?**
- **INNER JOIN**: When you only want matching records.  
- **LEFT JOIN**: When you want all from one table, even if no match exists.  
- **RIGHT JOIN**: When the right table is more important.  
- **FULL JOIN**: When you need all records from both tables.  
- **CROSS JOIN**: When you need every combination of rows.  

Would you like a **real-world example** (like Employee & Department)? üòä
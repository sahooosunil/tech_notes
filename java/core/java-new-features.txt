Here’s a **small example** and explanation for each of the top 10 Java features from Java 9 to Java 21:  

---

### **1. Java Platform Module System (JPMS) – Java 9**  
Before Java 9, Java applications were monolithic. JPMS introduced **modularity**, allowing better encapsulation and dependency management.

#### **Example:**
**Creating a module**  
```java
module com.example.helloworld {
    exports com.example.helloworld;
}
```
**Using the module**  
```java
package com.example.helloworld;

public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, Modular Java!");
    }
}
```
✔ **Benefits:**  
- Better encapsulation and security  
- Improved performance by loading only required modules  

---

### **2. JShell (REPL) – Java 9**  
JShell is an **interactive shell** for testing Java code without writing a full class.  

#### **Example:** (Run in Terminal)  
```sh
$ jshell
jshell> int x = 10;
jshell> System.out.println(x * 2);
```
✔ **Benefits:**  
- Quickly test and debug Java code  
- No need to write an entire `main()` method  

---

### **3. Local Variable Type Inference (`var`) – Java 10**  
The `var` keyword lets Java infer variable types automatically.  

#### **Example:**  
```java
var name = "Java 10";  // Compiler infers String
var age = 25;          // Compiler infers int
System.out.println(name + " - " + age);
```
✔ **Benefits:**  
- Reduces boilerplate  
- Improves readability  

---

### **4. HTTP Client API – Java 11**  
A modern HTTP client to replace `HttpURLConnection`.  

#### **Example:**  
```java
HttpClient client = HttpClient.newHttpClient();
HttpRequest request = HttpRequest.newBuilder()
    .uri(URI.create("https://jsonplaceholder.typicode.com/posts/1"))
    .GET()
    .build();

HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
System.out.println(response.body());
```
✔ **Benefits:**  
- Supports **synchronous and asynchronous** requests  
- Native support for **HTTP/2**  

---

### **5. Text Blocks – Java 13**  
Multi-line string literals without needing `\n` or `" + "` concatenation.  

#### **Example:**  
```java
String json = """
    {
      "name": "Java 13",
      "version": 13
    }
    """;
System.out.println(json);
```
✔ **Benefits:**  
- Cleaner syntax for JSON, XML, and SQL  
- Improves readability  

---

### **6. Pattern Matching for `instanceof` – Java 16**  
Before Java 16, you had to **explicitly cast** after `instanceof`.  

#### **Example:** (Before Java 16)  
```java
if (obj instanceof String) {
    String str = (String) obj;
    System.out.println(str.length());
}
```
#### **Example:** (Java 16)  
```java
if (obj instanceof String str) { // No need for explicit casting
    System.out.println(str.length());
}
```
✔ **Benefits:**  
- Reduces boilerplate  
- Improves code readability  

---

### **7. Records – Java 16**  
Simplifies **data carrier classes** (like DTOs) by automatically generating constructors, getters, `equals()`, `hashCode()`, and `toString()`.  

#### **Example:**  
```java
public record Person(String name, int age) {}

Person p = new Person("Alice", 30);
System.out.println(p.name() + " is " + p.age() + " years old.");
```
✔ **Benefits:**  
- Reduces **boilerplate code**  
- **Immutable** by default  

---

### **8. Sealed Classes – Java 17**  
Allows control over which classes can **extend** a class.  

#### **Example:**  
```java
sealed class Vehicle permits Car, Bike {}

final class Car extends Vehicle {}  // Allowed
final class Bike extends Vehicle {} // Allowed
class Truck extends Vehicle {}  // ❌ Error! Not permitted
```
✔ **Benefits:**  
- Improves **security** by **restricting inheritance**  
- Helps **design maintainable class hierarchies**  

---

### **9. Pattern Matching for `switch` – Java 17**  
Eliminates the need for `if-else` chains when checking types.  

#### **Example:**  
```java
static String check(Object obj) {
    return switch (obj) {
        case Integer i -> "It's an Integer: " + i;
        case String s -> "It's a String: " + s;
        case null -> "It's null!";
        default -> "Unknown type";
    };
}
System.out.println(check(10));  // Output: It's an Integer: 10
System.out.println(check("Java"));  // Output: It's a String: Java
```
✔ **Benefits:**  
- **More expressive and concise**  
- No need for **explicit type casting**  

---

### **10. Virtual Threads – Java 21**  
A **lightweight** alternative to platform threads, allowing **millions of concurrent tasks**.  

#### **Example:**  
```java
Runnable task = () -> System.out.println("Running in: " + Thread.currentThread());

Thread.startVirtualThread(task); // Lightweight virtual thread
```
✔ **Benefits:**  
- **Faster** than platform threads  
- **Reduces memory overhead**  

---

## **Summary Table of Features & Benefits**
| Java Version | Feature | Benefit |
|-------------|---------|---------|
| **Java 9** | **JPMS (Modules)** | Better encapsulation and performance |
| **Java 9** | **JShell (REPL)** | Quick prototyping |
| **Java 10** | **`var` (Type Inference)** | Less boilerplate |
| **Java 11** | **HTTP Client API** | HTTP/2 support, async requests |
| **Java 13** | **Text Blocks** | Cleaner multi-line strings |
| **Java 16** | **Pattern Matching (`instanceof`)** | No explicit casting needed |
| **Java 16** | **Records** | Immutable data carriers |
| **Java 17** | **Sealed Classes** | Control inheritance |
| **Java 17** | **Pattern Matching (`switch`)** | More expressive control flow |
| **Java 21** | **Virtual Threads** | Lightweight concurrency |

---

### **Conclusion**  
These features from Java 9 to Java 21 **improve developer productivity, performance, and readability**.  
If you’re upgrading from an older version, **focus on modularity (Java 9), records (Java 16), pattern matching (Java 17), and virtual threads (Java 21).**  

Would you like examples of specific use cases? 🚀
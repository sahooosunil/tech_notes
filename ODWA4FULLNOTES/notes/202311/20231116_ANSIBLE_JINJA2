Terraform, Docker, Kubernetes and Jenkins
------------------------------------------
Timings: 6:00 AM ist - 7:00 AM ist [Monday - Saturday]
         6:00 AM ist - 8:00 AM ist [Sunday: 1/2 hours]
Fee: 6k
Duration: 4 Months
The running notes will be written and provided to the students on weekly basis
No recordings, no videos and no youtubes. Students are not allowed to record the session incase if we find anyone recording the admission will be cancelled without fee refund.
    
Pre-requisite:
Linux operating system knowledge, preferrable ubuntu
Shell:
1. File Management 
2. User Management
3. Software package Management
4. Utility Commands [awk, cut, sed, grep, find etc]
5. Pipes and redirectors
[optional]
6. SSH protocol
7. Systemd init service
8. Shellscripting knowledge is an added advantage
9. Knowledge on Networking

-------------------------------------------------------------------------------------------------------------------------------------
Course Content
---------------
1. AWS Cloud Platform [15 - 20 days] [Partial/Briefly]
5 domains and in each domain only few services will be covered aspart of this course. it is to help you in implementing devops tools on aws cloud. There is an separate AWS CloudPlatform course that covers full domains/services and should join separately 

1. Network domain
 1.1 vpc
 1.2 subnet
 1.3 Internet Gateway
 1.4 Nat Gateway
 1.5 Route Table
 1.6 Security Groups
 1.7 NACL Rules
2. Compute 
 2.1 ec2
 2.2 Loadbalance (Application Loadbalancer)
3. Database
 3.1 RDS Service
4. IAM Registry
 4.1 users
 4.2 groups
 4.3 policies
 4.4 roles
5. Storage
 5.1 Elastic Block Storage
 5.2 S3 Bucket
 
2. Terraform [15-20 days]
2.1 What is IAC Automation Tools, what is the purpose of them?
2.2 Introduction to Terraform
2.3 Architecture
2.4 Types of Resources
    1. Resource Declarations
    2. DataSource Declarations
2.5 Variables
2.6 How to represent or express relationship/dependencies between the resources
2.7 Terraform state management
    1. local state management
    2. remote state management (S3 Bucket/DynamoDB)
2.8 Terraform Modules
2.9 Lifecycle

Live example demonstrating deployment of java application on aws cloudplatform using Terraform + Ansible

3. Docker [20-25 days]
3.1 Introduction to containerization technology
3.2 Virtualization vs Containerization
3.3 Introduction to Docker
3.4 Docker Architecture
3.5 Docker CLI
3.6 Docker Images: Layered, Stackable & Readonly
3.7 Image building directives
    1. FROM
    2. ENV
    3. ARG
    4. RUN
    5. COPY
    6. ADD
    7. LABEL
    8. WORKDIR
    9. CMD
    10. ENTRYPOINT
    11. EXPOSE
    12. HEALTHCHECK
    13. VOLUME
3.8 Docker Networking
3.9 Docker Port Expose
3.10 Bind Mounts vs Bind Volumes
3.11 Docker Compose

demonstrate: Packaging and running different types of applications in an containerized environment

4. JFrog Artifactory
5. Docker Container Registry

6. Kubernetes (K8s) [20-25 days]
6.1 Introduction to Kubernetes
6.2 Brief introduction to Microservices applications and the deployment architecture of them 
6.3 Kubernetes Cluster Setup [MiniKube]
6.4 Kubernetes EKS Cluster on AWS Cloudplatform

6.5 Architecture
6.6 Pod
6.7 DeploymentSet
6.8 ReplicaSet
6.9 Controller Manager
6.10 Service
6.11 ConfigMaps/ConfigSecrets
6.12 Ingress
6.13 LoadBalancer
6.14 Kubernetes Networking
6.15 Persistent Volume and Persistent Volume Claim
6.16 Resource Declaration

7. Helm Charts 3.0

8. Jenkins [10-15 days]
8.1 Introduction to continous integration and continous deployment
8.2 Jenkins Cluster Setup
    1. Master and Slave
    2. Installing and configuring Jenkins Plugins
        1. Maven
        2. Java
        3. Docker
        4. Terraform
        5. Ansible
        6. Git
8.3 Credentials
8.4 Global Tool Configuration
8.5 Jenkins Settings
8.6 Types of Jenkins Jobs
    1. Freestyle project
    2. Pipeline Project
        1. Declarative Pipeline
        2. Scripted Pipeline (Groovy language)
8.7 Directives
    - retry
    - timeout
    - history
    - environment
8.8 Pipeline Parameters

9. ELK 
 - Elastic Search
 - Logstash
 - Kibana
 
In-Short 
1. AWS Cloud Platform
2. Terraform
3. JFrog Artifactory
4. Docker Container Registry
5. Docker
6. Kubernetes
7. Helm
8. ELK
9. Jenkins
--------------------------------------------------------------------------------------------------------------------------------------

devops with aws [Feb, 2023]
1. Linux operating
2. Shellscripting
3. Networking
4. Virtualization
5. Vagrant
6. Java Language basics
7. Database basics
8. SSH protocol
9. Systemd Init Service
10. Firewall
11. Ansible
--------------------------------------------------------------------------------------------------------------------------------------

Ansible Jinja2 Templates
------------------------
Jinja2 template is an powerful and very popular python module used for creating/generating dynamic content out of an template file

2. Instead of building and generating the content within the program we can use template files
Most of the time the configuration files we want to generate or create has static content with few values changing within them, rather than writing the whole contents of the file inside the program we can have an template file created embedded with PlaceHolders defined within them.
    
site.conf.template
-----------------------
<VirtualHost *:80>
  ServerName [SERVER_NAME]
  DocumentRoot /var/www/[SITE_DIR]
</VirtualHost>

Now we can write the shellscript program to generate site configuration file by replacing the tokens in the above template file as below

apache2SiteGen.sh
------------------
#!/bin/bash
SERVER_NAME=$1
SITE_DIR=$2

sudo cp site.conf.template /etc/apache2/sites-available/SITE_DIR.conf
sudo sed -i '/s/[SERVER_NAME]/'$SERVER_NAME'/g' /etc/apache2/sites-available/SITE_DIR.conf
sudo sed -i '/s/[SITE_DIR]/'$SITE_DIR'/g' /etc/apache2/sites-available/SITE_DIR.conf

advantages:-
1. there is a clear separation between the contents and the programming logic. The programs no more contains contents that needs to be generated, the programs only contains programming logic, that makes it easy to understand and maintain
2. The contents to be constructed is placed aspart of an template file, we can easily understand the structure/syntaxes of the contents being generated
3. any change in the dynamic contents to be constructed requires a change only in template file, there is no need of changing the programs unless we want additional place holders to be resolved

Even though this approach of building the dynamic contents out the programs works well, these will not help us in handling complex scenarios

Many times while building the dynamic contents, we want to implement
1. conditional evaluate in generating the contents of these files
2. we wanted to loop through a collection of values on which we want to generate the contents

Let us elaborate to understand better
1. Conditional Evaluation in generating the dynamic contents
we are creating an mail exchange server configuration file with out of an template file shown below

exchange-server.conf.tmpl
<mail-server>
    <settings>
        <property name="mail.connection.host">[SERVER_HOST]</property>
        <property name="mail.connection.port">[PORT]</property>
        <property name="mail.connection.useSsl">[USE_SSL]</property>
        <property name="mail.connection.sslCertificatePath">[CERT_PATH]</property>
        <property name="mail.connection.username">[USERNAME]</property>
        <property name="mail.connection.password">[PASSWORD]</property>
    </settings>
</mail-server>

in the above template, we dont want always all the properties to be included while creating the mail-server configuration file. Based on the user inputs we want to evaluate and include few of the properties only
for eg.. if USE_SSL = false, then we dont want to include sslCertificatePath property in the configuration file. How can we achieve this in generating the contents dynamically based on conditional evaluation?
    
To handle the above scenario we need to have #2 template files here
1. sslCerticatePath property
2. another without the sslCertificatePath property

in our shellscript we need to write the code based on the user input which template file to be choosen for generating the configuration file

exchange-server-ssl.conf.tmpl
<mail-server>
    <settings>
        <property name="mail.connection.host">[SERVER_HOST]</property>
        <property name="mail.connection.port">[PORT]</property>
        <property name="mail.connection.useSsl">true</property>
        <property name="mail.connection.sslCertificatePath">[CERT_PATH]</property>
        <property name="mail.connection.username">[USERNAME]</property>
        <property name="mail.connection.password">[PASSWORD]</property>
    </settings>
</mail-server>

exchange-server-nossl.conf.tmpl
<mail-server>
    <settings>
        <property name="mail.connection.host">[SERVER_HOST]</property>
        <property name="mail.connection.port">[PORT]</property>
        <property name="mail.connection.useSsl">false</property>
        <property name="mail.connection.username">[USERNAME]</property>
        <property name="mail.connection.password">[PASSWORD]</property>
    </settings>
</mail-server>

genMailServerConf.sh
--------------------
#!/bin/bash
SERVER_HOST=$1
PORT=$2
USE_SSL=$3
USERNAME=$4
PASSWORD=$5
SSL_CERT_PATH=$6

if [ $USE_SSL = 'TRUE' ]
then
  cp exchange-server-ssl.conf.tmpl ~/exchange-server.conf
else
  cp exchange-server-nossl.conf.tmpl ~/exchange-server.conf
fi

sed -i 's/[SERVER_HOST]/'$SERVER_HOST'/g' ~/exchange-server.conf
sed -i 's/[PORT]/'$PORT'/g' ~/exchange-server.conf
sed -i 's/[USERNAME]/'$USERNAME'/g' ~/exchange-server.conf
sed -i 's/[PASSWORD]/'$PASSWORD'/g' ~/exchange-server.conf
sed -i 's/[CERT_PATH]/'$CERT_PATH'/g' ~/exchange-server.conf








































































































































































             
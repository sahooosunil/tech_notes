Terraform provisioners
-----------------------
Provisioners are the way through which we can hookup the software configuration management scripts to the Terraform, so that upon provisioning the infrastructure/resource, the terraform executes these configuration scripts ontop of the resource to install/configure platform software packages on top of that infrastructure

There are 3 types of provisioners are there supported by Terraform
1. file provisioner
2. local-exec provisioner
3. remote-exec provisioner

1. file provisioner
file provisioners are used for copying the files from terraform workstation/control node to the remote resources that we have provisioned

2. local-exec provisioner
runs the software configuration management scripts locally on the terraform workstation or controlnode from where we provisioned the infrastructure

3. remote-exec provisioner
run the software configuration management scripts by copying them onto the remote resources that are provisioned and executes them local to the resource itself.
  
Provisioners can be defined/configured at 2 levels
1. local to the resource declaration
2. global

1. local to the resource declaration
We can define a provisioner at the resource-level for whom we want to apply. Upon provisioning the resource terraform immediately executes the provision on the resource.
  
2. global
If we want to execute a provisioner or software configuration management script on provisioning a group of resources or all the resources defined in the terraform file, then we need to use global provisioner scope.
Provisioners are used for installing/configuring the software packages on a resource, so without a resource we cannot define a provisioner, but global provisioners are not attached to any resource, so how to write a provisioner without attached to any specific resource.
  
The Terraform has provided "null_resource" on whihc we can configure the provisioner. The null_resource declaration indicates the terraform no resource needs to be provisioned for the resource declaration, it is just a place holder for configuring provisioners on it.
  
Let us understand using file and remote-exec provisioner with an example:
syntax:
provisioner "provisionerType" {
  provisioner configuration separated with key/value
}
  
  
Let us write an terraform file to provision the ec2 instance and copy an "readme.txt" file from the Terraform workstation to the provisioned instance using file provisioner.
  
airtelcare
|-terraform
  |-variables.tf
  |-main.tf
  |-inputs.tfvars
  |-output.tf
  |-file
    |-readme.txt
  |-sh
    |-installjdk.sh
    
installjdk.sh
-------------
#!/bin/bash
sudo apt update -y
sudo apt install -y openjdk-17-jdk
  
  
variables.tf
-------------
variable ec2instanceconfig {
  type = object({
    ami = string
    instance_type = string
    associate_public_ip_address = bool
  })
}

main.tf
---------
terraform {
  required_provisioners { 
    aws = {
      source ="hashicorp/aws"
    }
  }
}
provider "aws" {
  region = "ap-south-1"
  profile ="default"
}

resource "aws_security_group" "airtelcaresg" {
  ingress {
    from_port = 22
    to_port = 22
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_key_pair" "airtelcarekp" {
  public_key = "publickey"
  key_name = "airtelcarekp"
}

ssh -i keyFile username@public_ip 

resource "aws_instance" "airtelcareec2" {
  ami = var.ec2instanceconfig.ami
  instance_type = var.ec2instanceconfig.instance_type
  vpc_security_group_ids = [aws_security_group.airtelcaresg.id]
  key_name = aws_key_pair.airtecarekp.key_name
  associate_public_ip_address = var.ec2instanceconfig.associate_public_ip_address
  
  connection {
    type = "ssh"
    host = self.public_ip
    user = "ubuntu"
    private_key_file = "~/.ssh/terraformkp"
  }
  
  provisioner "file" {
    source ="file/readme.txt"
    destination = "/tmp/"
  }
  
  provisioner "file" {
    source "sh/installjdk.sh"
    destination "/tmp/installjdk.sh"
  }
  
  provisioner "remote-exec" {
    inline = {
      "chmod u+x /tmp/installjdk.sh",
      "bash /tmp/installjdk.sh"
    }
  }
}

outputs.tf
output "public_ip" {
  value = "${aws_instance.airtelcareec2.public_ip}"
  description = "public ip address"
}

inputs.tfvars 
--------------
ec2instanceconfig.ami = ""
ec2instanceconfig.instance_type="t2.micro"
ec2instanceconfig.associate_public_ip_address=true
------------------------------------------------------------------------------
### 1. **File Provisioner**
The File Provisioner is used to copy files or directories from the local machine to a remote resource (like a virtual machine) during the provisioning process.

**Example Use Case:**  
You might use the File Provisioner to copy a configuration file or a script to a newly created virtual machine.

**Example:**
```hcl
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  
  provisioner "file" {
    source      = "app-config.yaml"
    destination = "/etc/app-config.yaml"
  }
  
  connection {
    type     = "ssh"
    user     = "ec2-user"
    private_key = file("~/.ssh/id_rsa")
    host     = self.public_ip
  }
}
```

### 2. **Local-Exec Provisioner**
The Local-Exec Provisioner runs commands on the machine where Terraform is being executed, not on the remote resource.

**Example Use Case:**  
You might use the Local-Exec Provisioner to trigger a script that updates DNS records or sends a notification after a resource is created.

**Example:**
```hcl
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  
  provisioner "local-exec" {
    command = "echo 'Instance created with IP: ${self.public_ip}' >> instance-info.txt"
  }
}
```

### 3. **Remote-Exec Provisioner**
The Remote-Exec Provisioner runs commands on the remote resource once it has been created, using SSH or WinRM.

**Example Use Case:**  
You might use the Remote-Exec Provisioner to install software or configure the system after an instance is created.

**Example:**
```hcl
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  
  provisioner "remote-exec" {
    inline = [
      "sudo apt-get update",
      "sudo apt-get install -y nginx"
    ]
  }
  
  connection {
    type     = "ssh"
    user     = "ubuntu"
    private_key = file("~/.ssh/id_rsa")
    host     = self.public_ip
  }
}
```

### Summary of Use Cases:
1. **File Provisioner** - Copy files/scripts to a remote machine (e.g., uploading a config file).
2. **Local-Exec Provisioner** - Run local commands (e.g., updating DNS or notifying a user).
3. **Remote-Exec Provisioner** - Execute remote commands (e.g., installing software on a VM).

These provisioners are useful for bootstrapping or configuring resources but should be used cautiously since they can add complexity and are less declarative than other Terraform constructs.
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  




















































































  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

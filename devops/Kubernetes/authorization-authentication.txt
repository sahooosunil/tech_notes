
  does kubernetes work on https protocol? 
  what are the componetes in kubernetes talk to each other using https protocol?
   kubectl <-> api server
   api server <-> scheduler
   api server <-> etcd
   api server <-> controller
   api server (master node) <-> worker node (kubelet process)

  How kubernetes maintains private key and public key/certificate? 
  who signs the certificate of kubernetes?
  explain kubernetes authentication mechanism?
  

Explain ssl/tls
------------------------------ 
In the context of **SSL/TLS**, the **private key, public key, and certificate** are essential components of public key cryptography (PKC), which is used to secure communication over the internet. Here‚Äôs how they work:

### **1. Private Key**  
- A **private key** is a **secret cryptographic key** that is known only to the owner of a website or server.
- It is used to **decrypt** data that has been encrypted with the corresponding **public key**.
- The private key is also used to **digitally sign** data, proving its authenticity.
- **Example:** A web server uses its private key to decrypt the encrypted handshake message from a client.

### **2. Public Key**  
- A **public key** is freely distributed and is used to **encrypt** data that can only be decrypted with the corresponding **private key**.
- It is also used to verify **digital signatures** created with the private key.
- **Example:** When a client connects to an HTTPS website, it receives the public key from the server‚Äôs SSL certificate and uses it to encrypt data before sending it to the server.

### **3. SSL/TLS Certificate**  
- An **SSL/TLS certificate** is a digital file issued by a **Certificate Authority (CA)** that contains:
  - The public key
  - The domain name
  - The organization details (if applicable)
  - The certificate‚Äôs issuer (CA)
  - The certificate‚Äôs expiration date
- The certificate proves the authenticity of the website and enables **secure communication**.
- **Example:** When you visit an HTTPS website, your browser checks the SSL certificate to verify that the site is legitimate.

### **How They Work Together in SSL/TLS?**
1. **Key Pair Generation**: A website or server generates a public-private key pair.
2. **Certificate Signing Request (CSR)**: The server submits its public key to a CA to obtain a certificate.
3. **Certificate Issuance**: The CA verifies the request and issues an SSL certificate.
4. **Handshake Process**:
   - The server sends the SSL certificate (including the public key) to the client.
   - The client verifies the certificate's validity.
   - The client encrypts a **session key** with the public key and sends it to the server.
   - The server decrypts the session key with its **private key**.
   - Both parties use the session key to establish a **secure communication channel** using **symmetric encryption**.

This process ensures **data confidentiality, integrity, and authentication** during communication over HTTPS.
--------------------------------------------------------------------------------------------------------
### **What is a Self-Signed Certificate?**  
A **self-signed certificate** is an **SSL/TLS certificate** that is **signed by its own private key** instead of being issued by a trusted **Certificate Authority (CA)**.

### **How It Works?**  
- Normally, an SSL certificate is issued by a CA, which acts as a trusted third party.
- In a **self-signed certificate**, the **public key** is signed using the **private key** of the same entity, meaning no external CA is involved.
- Since no trusted authority verifies it, browsers and systems usually **do not trust self-signed certificates by default**.

### **How to Generate a Self-Signed Certificate?**  
You can create a self-signed certificate using **OpenSSL**:  
```sh
openssl req -x509 -newkey rsa:4096 -keyout private.key -out certificate.crt -days 365 -nodes
```
- `-x509` ‚Üí Create an X.509 certificate (standard format for SSL certificates).
- `-newkey rsa:4096` ‚Üí Generate a new RSA key pair (4096-bit).
- `-keyout private.key` ‚Üí Save the private key in `private.key`.
- `-out certificate.crt` ‚Üí Save the certificate in `certificate.crt`.
- `-days 365` ‚Üí Set the certificate validity to 365 days.
- `-nodes` ‚Üí No password protection for the private key.

### **Advantages of Self-Signed Certificates**  
‚úÖ **Free**: No need to pay a CA.  
‚úÖ **Quick to Generate**: No need to wait for validation.  
‚úÖ **Useful for Internal Use**: Suitable for local development, testing, and internal systems.

### **Disadvantages of Self-Signed Certificates**  
‚ùå **Not Trusted by Browsers**: You will see a **"Not Secure" warning** when using a self-signed certificate in a web browser.  
‚ùå **No Identity Verification**: Since there's no CA, users cannot be sure the website belongs to a legitimate entity.  
‚ùå **Manual Trust Configuration**: Needs to be manually added to trusted stores for internal use.

### **Where Are Self-Signed Certificates Used?**  
- **Local development**: When testing HTTPS locally.
- **Internal applications**: Used in private networks where users can manually trust the certificate.
- **Temporary SSL setup**: Before obtaining a CA-issued certificate.
------------------------------------------------------------------------------------------------------
### **What is a Certificate Authority (CA)?**  
A **Certificate Authority (CA)** is a **trusted organization** that issues **SSL/TLS certificates** to verify the authenticity of websites, organizations, or individuals.  

It acts as a **third-party trust provider**, ensuring that the certificate holder is legitimate and their encryption keys are securely managed.

### **Types of Certificate Authorities**  
1. **Root CA**  
   - The top-level CA that issues certificates to **Intermediate CAs**.  
   - Example: **DigiCert, GlobalSign, Sectigo, Let's Encrypt**.  
   - Root CAs are pre-installed in operating systems, browsers, and devices.

2. **Intermediate CA**  
   - Acts as a bridge between the **Root CA** and the end-user certificates.  
   - Helps protect the Root CA by handling most certificate issuance.  

3. **Issuing CA (Leaf CA)**  
   - Directly issues **SSL/TLS certificates** to websites, applications, or users.

---

### **How Does a CA Sign a Certificate?**  

#### **Step 1: Generate a Key Pair (Public & Private Key)**
- The **website owner (or server admin)** generates a **private key** and a **public key**.
- Example using OpenSSL:
  ```sh
  openssl genrsa -out private.key 2048
  ```

#### **Step 2: Create a Certificate Signing Request (CSR)**
- A **CSR (Certificate Signing Request)** is generated and sent to the CA.
- The CSR contains:
  - The public key
  - Organization details (domain name, company name, location)
  - A unique request identifier
- Example using OpenSSL:
  ```sh
  openssl req -new -key private.key -out request.csr
  ```

#### **Step 3: Certificate Authority Verifies the Request**
- The CA checks:
  - Does the applicant control the domain? (**Domain Validation**)
  - Is the company legitimate? (**Organization Validation**)
  - Is the business legally registered? (**Extended Validation**)  
- Some CAs perform **email validation, DNS verification, or document verification**.

#### **Step 4: CA Signs the Certificate**
- The CA **digitally signs** the certificate using its **private key**.
- This signature ensures:
  - The certificate is **authentic**.
  - It was **issued by a trusted CA**.
- The CA runs:
  ```sh
  openssl x509 -req -in request.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out certificate.crt -days 365
  ```
- The **resulting certificate** (`certificate.crt`) is now **trusted**.

#### **Step 5: Issuing the Certificate to the Website**
- The website installs the **CA-signed certificate** (`certificate.crt`) and **intermediate certificates**.
- When users visit the site, their browser checks:
  - The certificate‚Äôs **validity**.
  - If a **trusted CA** issued it.
  - If the domain name matches the certificate.

---

### **Example: SSL/TLS Certificate Chain**
üìå When a user visits **https://example.com**, their browser follows this chain of trust:

1. **Website Certificate** (Signed by an Intermediate CA)
2. **Intermediate CA Certificate** (Signed by the Root CA)
3. **Root CA Certificate** (Trusted by the browser)

üí° If any certificate in the chain is **invalid or expired**, the browser will show a **security warning**.

---

### **Why is a CA Needed Instead of Self-Signed Certificates?**
‚úÖ **Globally Trusted** ‚Üí Browsers trust CA-signed certificates.  
‚úÖ **Prevents Man-in-the-Middle Attacks** ‚Üí Ensures secure encryption.  
‚úÖ **Identity Verification** ‚Üí Confirms ownership of the domain/business.
-------------------------------------------------------------------------------------------------------
how browser validates the certificate? does it have all the certificate authority public key to validate?
-----------------------------------------------------------------------------------
1. The browser receives the website‚Äôs SSL/TLS certificate and checks its **validity period** and **domain name**.  
2. It verifies the certificate‚Äôs **digital signature** using the **public key** of the issuing **Intermediate CA**.  
3. The browser then checks if the Intermediate CA‚Äôs certificate is signed by a **trusted Root CA**.  
4. **Root CA certificates** are pre-installed in the browser/OS, allowing the browser to validate the entire **certificate chain**.  
5. If the chain is valid and trusted, a **secure connection (HTTPS)** is established; otherwise, a **security warning** appears. üöÄ
-------------------------------------------------------------------------------------------------------
### **What is Mutual TLS (mTLS)?**  
**Mutual TLS (mTLS)** is an enhanced form of **TLS authentication** where **both the client and the server authenticate each other** using SSL/TLS certificates.  

Unlike regular TLS (where only the server presents a certificate), mTLS ensures that both parties in a connection are **verified and trusted** before communication begins.

---

### **How mTLS Works?**  
1. **Client Initiates a Secure Connection** ‚Üí Sends a "Client Hello" to the server.  
2. **Server Sends Its Certificate** ‚Üí The client verifies it using a trusted **Root CA**.  
3. **Server Requests Client Certificate** ‚Üí Unlike normal TLS, the server demands authentication from the client.  
4. **Client Sends Its Certificate** ‚Üí The server verifies it against its trusted **CA list**.  
5. **Both Parties Authenticate & Establish a Secure Channel** ‚Üí Encrypted data exchange begins.  

---

### **Why Use mTLS?**  
‚úÖ **Stronger Security** ‚Üí Prevents unauthorized access (useful for APIs and microservices).  
‚úÖ **No Passwords Needed** ‚Üí Authentication happens via cryptographic certificates.  
‚úÖ **Protection Against Spoofing & MITM Attacks** ‚Üí Ensures both parties are legitimate.  

---

### **Where is mTLS Used?**  
- **Microservices Communication** (Istio, Kubernetes)  
- **Zero Trust Security** (Strict identity verification)  
- **Banking & Financial Transactions**  
- **IoT Device Authentication**  

Would you like help setting up **mTLS in Spring Boot, Kubernetes, or Istio?** üöÄ
--------------------------------------------------------------------------------------------------------
### **Does Kubernetes Work on HTTPS Protocol?**  
Yes, **Kubernetes uses HTTPS (TLS) for secure communication** between its components. All communication within the cluster, including **kubectl, API server, controller, scheduler, kubelet, and etcd**, happens over **TLS-encrypted channels**.

---

### **Which Kubernetes Components Communicate Over HTTPS?**  

1. **`kubectl` <-> API Server**  
   - Uses HTTPS to send requests to the API server.  
   - Authentication via **client certificates, tokens, or kubeconfig**.  

2. **API Server <-> Scheduler**  
   - Uses HTTPS to securely schedule workloads.  
   - The API server exposes an endpoint that the scheduler queries.  

3. **API Server <-> etcd**  
   - Uses HTTPS to encrypt data between API server and etcd (stores cluster state).  
   - API server authenticates with etcd using **TLS certificates**.  

4. **API Server <-> Controller Manager**  
   - Controllers communicate securely over HTTPS to manage cluster state.  

5. **API Server (Master Node) <-> Worker Node (Kubelet Process)**  
   - The API server authenticates the **kubelet** before sending commands (e.g., deploy workloads).  
   - **Kubelet also validates the API server's certificate**.  

---

### **How Kubernetes Maintains Private Keys and Certificates?**  

Kubernetes stores **TLS certificates and private keys** in:  
- **`/etc/kubernetes/pki/`** directory on control plane nodes.  
- Secrets are used for **service-to-service authentication** inside the cluster.  

Typical certificates in Kubernetes:  
| File | Purpose |
|---|---|
| `ca.crt` | Root CA certificate for signing others. |
| `apiserver.crt` | API server TLS certificate. |
| `apiserver-key.pem` | API server private key. |
| `etcd/peer.crt` | etcd peer-to-peer TLS certificate. |
| `front-proxy-client.crt` | Front proxy client authentication. |

---

### **Who Signs Kubernetes Certificates?**  

- **Kubernetes uses a self-signed Certificate Authority (CA)** by default.  
- The **Root CA (`ca.crt` and `ca.key`)** is generated when Kubernetes is installed (e.g., via `kubeadm`).  
- All Kubernetes components have certificates **signed by this CA**.  

üí° You can also **use an external CA** (e.g., Let's Encrypt, HashiCorp Vault) to sign Kubernetes certificates.

---

### **Kubernetes Authentication Mechanism**  

1. **kubectl Authentication (User -> API Server)**  
   - Users authenticate via **kubeconfig** using:
     - **Client Certificates** (`kubectl` provides a client cert signed by the CA).  
     - **Bearer Tokens** (e.g., ServiceAccount tokens).  
     - **OIDC (OpenID Connect)** (for external authentication like Google, Keycloak).  
     - **Webhook Authentication** (custom external authentication).  

2. **API Server Authentication (Internal Components)**  
   - Kubelets, Controllers, and etcd authenticate using:
     - **X.509 Certificates** (signed by Kubernetes CA).  
     - **ServiceAccount Tokens** (JWT tokens stored in Secrets).  

3. **API Authorization**  
   - Kubernetes uses **RBAC (Role-Based Access Control)** to determine permissions.  
   - Requests are checked against:
     - **Roles/ClusterRoles** (Permissions).
     - **RoleBindings/ClusterRoleBindings** (Who gets access).  

4. **Service-to-Service Authentication (Pods & Services)**  
   - Kubernetes **does NOT have built-in mTLS**, but service-to-service authentication can be handled using:  
     - **Istio/Linkerd** (mTLS for microservices).  
     - **ServiceAccounts** (Pods authenticate using JWT tokens).  

-------------------------------------------------------------------------------------------------------
#### ** Can We Create Users in Kubernetes?
-------------------------------------------
    - No, Kubernetes does not have a built-in user management system like Linux. 
    - Instead, users are managed outside Kubernetes, and authentication is handled via client certificates, tokens, or external identity providers.
--------------------------------------------
### **Role & RoleBinding vs. ClusterRole & ClusterRoleBinding in Kubernetes**  

Kubernetes uses **Role-Based Access Control (RBAC)** to manage user and service permissions.  

#### **1Ô∏è‚É£ Role & RoleBinding (Namespace-Level Permissions)**  
- **Role**: Defines permissions for resources within a **specific namespace** (e.g., Pods, ConfigMaps).  
- **RoleBinding**: Associates a **Role** with a user, group, or ServiceAccount, granting permissions.  

‚úÖ **Use Case**: Grant a user access to manage Pods **only in `dev` namespace**.  

**Example:**  
```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-reader
  namespace: dev
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
```
```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-reader-binding
  namespace: dev
subjects:
  - kind: User
    name: myuser
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
```
üîπ **User `myuser` can now read Pods in `dev` namespace only.**  

---

#### **2Ô∏è‚É£ ClusterRole & ClusterRoleBinding (Cluster-Wide Permissions)**  
- **ClusterRole**: Defines permissions at the **cluster level** or across **all namespaces**.  
- **ClusterRoleBinding**: Grants a **ClusterRole** to users, groups, or ServiceAccounts.  

‚úÖ **Use Case**: Allow a user to manage Nodes across the entire cluster.  

**Example:**  
```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: node-admin
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch", "delete"]
```
```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: node-admin-binding
subjects:
  - kind: User
    name: myuser
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: node-admin
  apiGroup: rbac.authorization.k8s.io
```
üîπ **User `myuser` can now manage Nodes cluster-wide.**  

---

### **Key Differences:**
| Feature | Role & RoleBinding | ClusterRole & ClusterRoleBinding |
|---------|-------------------|------------------------------|
| Scope | Specific Namespace | Entire Cluster / All Namespaces |
| Grants Access To | Namespace-level resources | Cluster-wide resources (e.g., Nodes, PersistentVolumes) |
| Example | Pod management in `dev` namespace | Managing all Nodes |
-----------------------------------------------------------------------------------------------------------
### **How to Add a New User "Adam" in Kubernetes and Grant Read-Only Access to Pods in the "setups" Namespace**  

Since Kubernetes does **not have a built-in user management system**, we create users **outside Kubernetes** using **client certificates** and manage their access using **RBAC (Role-Based Access Control)**.

---

## **üîπ Step 1: Create a Certificate for the New User "Adam"**
Kubernetes uses **TLS client certificates** for authentication. Adam will need a client certificate signed by the Kubernetes **Certificate Authority (CA)**.

### **1Ô∏è‚É£ Generate a Private Key for Adam**
```bash
openssl genrsa -out adam.key 2048
```

### **2Ô∏è‚É£ Generate a Certificate Signing Request (CSR)**
```bash
openssl req -new -key adam.key -out adam.csr -subj "/CN=adam/O=developers"
```
- `/CN=adam` ‚Üí Common Name (CN) is the username (`adam`).
- `/O=developers` ‚Üí Organization (O) can be used for grouping users.

### **3Ô∏è‚É£ Sign Adam's Certificate Using Kubernetes CA**
```bash
openssl x509 -req -in adam.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out adam.crt -days 365
```
This signs the **adam.crt** certificate using the **Kubernetes CA**.

---

## **üîπ Step 2: Configure Adam‚Äôs Credentials in Kubeconfig**
Adam needs a kubeconfig file to authenticate with the Kubernetes cluster.

### **4Ô∏è‚É£ Add Adam‚Äôs Credentials to Kubeconfig**
```bash
kubectl config set-credentials adam --client-certificate=adam.crt --client-key=adam.key --embed-certs=true
```

### **5Ô∏è‚É£ Add a Context for Adam**
```bash
kubectl config set-context adam-context --cluster=kubernetes --namespace=setups --user=adam
```

### **6Ô∏è‚É£ Switch to Adam‚Äôs Context**
```bash
kubectl config use-context adam-context
```

---

## **üîπ Step 3: Create an RBAC Role for Adam**
We must create a **Role** that allows Adam to read Pods in the `setups` namespace.

### **7Ô∏è‚É£ Create a Role in the "setups" Namespace**
```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-reader
  namespace: setups
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
```
**Save this as `role.yaml` and apply it:**
```bash
kubectl apply -f role.yaml
```

---

## **üîπ Step 4: Bind the Role to Adam**
Now, we associate Adam with the **pod-reader** Role using a **RoleBinding**.

### **8Ô∏è‚É£ Create a RoleBinding for Adam**
```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-reader-binding
  namespace: setups
subjects:
  - kind: User
    name: adam
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
```
**Save this as `rolebinding.yaml` and apply it:**
```bash
kubectl apply -f rolebinding.yaml
```

---

## **üîπ Step 5: Verify Adam‚Äôs Access**
### **9Ô∏è‚É£ Test Adam‚Äôs Access to Pods**
Adam should now be able to **list** pods but **not create/delete them**.
```bash
kubectl auth can-i list pods --namespace=setups --as=adam
```
Expected Output:
```bash
yes
```

### **üîü Try to Delete a Pod (Should Be Denied)**
```bash
kubectl delete pod my-pod --namespace=setups --as=adam
```
Expected Output:
```bash
Error from server (Forbidden): pods "my-pod" is forbidden: User "adam" cannot delete pods in the namespace "setups"
```

---

## **üéØ Summary**
‚úÖ **Adam can now authenticate using a client certificate.**  
‚úÖ **Adam has read-only access to Pods in the `setups` namespace.**  
‚úÖ **Adam cannot modify or delete resources.**  

Would you like to extend Adam's permissions further, such as accessing logs or describing pods? üöÄ

### **Extend Adam‚Äôs Permissions to Access Logs and Describe Pods**  

Currently, Adam can **only list and watch pods** in the `setups` namespace. To allow Adam to **describe pods and view logs**, we need to update the existing Role.

---

## **üîπ Step 1: Modify the Role to Include More Permissions**  
Edit the `pod-reader` Role to include **describe (`get`) and logs (`get on pods/log`)**.

### **1Ô∏è‚É£ Update the Role Definition**
Modify `role.yaml` to include additional permissions:
```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-reader
  namespace: setups
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get"]
```
**Apply the updated Role:**
```bash
kubectl apply -f role.yaml
```

---

## **üîπ Step 2: Verify Adam‚Äôs New Permissions**
### **2Ô∏è‚É£ Check if Adam Can Describe Pods**
```bash
kubectl describe pod <pod-name> -n setups --as=adam
```
‚úÖ **Expected Output:** Pod details should be displayed.

### **3Ô∏è‚É£ Check if Adam Can View Logs**
```bash
kubectl logs <pod-name> -n setups --as=adam
```
‚úÖ **Expected Output:** Logs of the pod should be displayed.

### **4Ô∏è‚É£ Check If Adam Can Create/Delete Pods (Should Be Denied)**
```bash
kubectl delete pod <pod-name> -n setups --as=adam
```
üö´ **Expected Output:**  
```bash
Error from server (Forbidden): User "adam" cannot delete pods in the namespace "setups"
```

---

## **üéØ Summary**
‚úÖ **Adam can now list, watch, describe, and get logs of Pods in the `setups` namespace.**  
‚úÖ **Adam still cannot create, modify, or delete Pods.**  

Would you like to grant Adam additional permissions, such as accessing ConfigMaps or Secrets? üöÄ
--------------------------------------------------------------------------------------------------------
### **How to Add an Existing IAM User (Ethan) to an EKS Cluster with Full Access to Pods in the "setups" Namespace**

To allow **Ethan** to interact with the **EKS cluster**, we will do the following steps:

1. **Associate Ethan's IAM User with EKS**
2. **Create a Kubernetes Role** that grants Ethan the required permissions on the `setups` namespace.
3. **Create a RoleBinding** to bind Ethan to that Role.

### **üîπ Step 1: Associate IAM User (Ethan) with EKS Cluster**

#### **1Ô∏è‚É£ Update `aws-auth` ConfigMap to Map Ethan‚Äôs IAM User**
EKS uses an IAM identity mapping to provide access to users or roles. The `aws-auth` ConfigMap in the `kube-system` namespace controls this mapping.

- Get the current `aws-auth` ConfigMap:
  ```bash
  kubectl -n kube-system get configmap/aws-auth -o yaml
  ```

- Add Ethan's IAM user (assuming Ethan's IAM User ARN is `arn:aws:iam::123456789012:user/Ethan`).

- Edit the `aws-auth` ConfigMap to map Ethan‚Äôs IAM user:
  ```bash
  kubectl -n kube-system edit configmap/aws-auth
  ```

Add the following entry under `mapUsers`:
```yaml
mapUsers: |
  - userarn: arn:aws:iam::123456789012:user/Ethan
    username: ethan
    groups:
      - system:masters
```
- `username: ethan` ‚Üí The name used to map to the user in Kubernetes.
- `groups: [system:masters]` ‚Üí Grants admin access (you may adjust the group for finer control later).

---

### **üîπ Step 2: Create a Kubernetes Role with Required Permissions**

#### **2Ô∏è‚É£ Create a Role with Full Pod Access in the "setups" Namespace**

Create a **Role** YAML file (`role.yaml`) that grants **read, create, delete, and log access** for Pods in the `setups` namespace.

```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-admin
  namespace: setups
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "create", "delete", "update"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get"]
```

- This role will allow **Ethan** to:
  - Read, create, update, delete pods.
  - Access logs of pods in the `setups` namespace.

Apply the role to the cluster:
```bash
kubectl apply -f role.yaml
```

---

### **üîπ Step 3: Create a RoleBinding to Associate Ethan with the Role**

#### **3Ô∏è‚É£ Create a RoleBinding to Bind Ethan to the `pod-admin` Role**

Create a **RoleBinding** (`rolebinding.yaml`) to bind Ethan‚Äôs IAM user to the `pod-admin` Role.

```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-admin-binding
  namespace: setups
subjects:
  - kind: User
    name: ethan
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: pod-admin
  apiGroup: rbac.authorization.k8s.io
```

Apply the RoleBinding:
```bash
kubectl apply -f rolebinding.yaml
```

---

### **üîπ Step 4: Verify Ethan‚Äôs Permissions**

#### **4Ô∏è‚É£ Test Ethan‚Äôs Permissions with kubectl**

Once the `aws-auth` ConfigMap and RoleBinding are applied, Ethan should be able to use **kubectl** with his IAM credentials.

1. **Test Ethan‚Äôs access to Pods**:
   ```bash
   kubectl get pods -n setups --as=ethan
   ```

2. **Test Ethan‚Äôs ability to create a Pod**:
   ```bash
   kubectl run test-pod --image=nginx -n setups --as=ethan
   ```

3. **Test Ethan‚Äôs ability to delete a Pod**:
   ```bash
   kubectl delete pod test-pod -n setups --as=ethan
   ```

4. **Test Ethan‚Äôs access to logs**:
   ```bash
   kubectl logs <pod-name> -n setups --as=ethan
   ```

---

### **üéØ Summary**
- **IAM User Mapping**: The IAM user `Ethan` is mapped in the `aws-auth` ConfigMap for Kubernetes access.
- **Kubernetes Role**: The `pod-admin` Role was created to grant Ethan full access to Pods in the `setups` namespace.
- **RoleBinding**: The `pod-admin-binding` RoleBinding associates Ethan with the `pod-admin` Role.
- **Access Testing**: Ethan can now manage Pods (create, read, delete) and access Pod logs in the `setups` namespace.

Would you like help with any other specific configurations or testing? üöÄ

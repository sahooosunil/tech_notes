In Kubernetes, volumes provide storage to pods, and they allow data to persist beyond the lifecycle of a pod. 
You can create volumes and use them in your deployment files for accessing data. 
Below is a step-by-step guide on how to create volumes in Kubernetes and add them to a deployment.

### Step 1: Define the Volume in a Kubernetes Deployment

In your Kubernetes deployment YAML file, you define a volume and then mount it to a container in the pod.

Here's an example of how you can create a volume and use it within a deployment:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: example
  template:
    metadata:
      labels:
        app: example
    spec:
      containers:
      - name: example-container
        image: nginx:latest
        volumeMounts:
        - name: example-volume
          mountPath: /usr/share/nginx/html  # Path where the volume will be mounted in the container
      volumes:
      - name: example-volume
        emptyDir: {}  # You can use other volume types (e.g., PersistentVolumeClaim, ConfigMap)
```

### Key Components:
1. **`volumes`**:
   - This is where you define the volume. The `emptyDir` volume type is used here, which creates an empty directory for the pod, but you can replace it with other volume types like `PersistentVolumeClaim`, `hostPath`, or `ConfigMap` depending on your use case.

2. **`volumeMounts`**:
   - In the container definition, you specify how the volume will be mounted inside the container, using the `mountPath` field to define where the volume should be mounted.

### Step 2: Using Other Types of Volumes
Kubernetes supports various volume types, depending on your storage needs:

- **emptyDir**: An initially empty directory that persists for the life of the pod.
- **PersistentVolumeClaim (PVC)**: Allows the pod to use a persistent volume for more durable storage.
- **hostPath**: Uses a directory or file from the node's file system.
- **ConfigMap or Secret**: Mounts configuration data or secrets into the container.

Hereâ€™s how you might use a `PersistentVolumeClaim` in your deployment:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: example
  template:
    metadata:
      labels:
        app: example
    spec:
      containers:
      - name: example-container
        image: nginx:latest
        volumeMounts:
        - name: example-pvc
          mountPath: /usr/share/nginx/html
      volumes:
      - name: example-pvc
        persistentVolumeClaim:
          claimName: my-pvc  # Reference to an existing PVC
```

In this case:
- The volume is backed by a `PersistentVolumeClaim` (PVC) named `my-pvc`.
- The PVC should already be created in your cluster or will need to be created separately.

### Step 3: Create a PersistentVolumeClaim (PVC)

Before using a `PersistentVolumeClaim` in your deployment, you'll need to create the PVC.

Here's an example YAML to create a PVC:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-pvc
spec:
  accessModes:
    - ReadWriteOnce  # The volume can be mounted as read-write by a single node
  resources:
    requests:
      storage: 1Gi  # Size of the persistent volume requested
```

### Step 4: Apply the YAML Files

Once your YAML files (Deployment and PVC) are ready, apply them to your Kubernetes cluster:

1. Apply the PVC first (if using PVC):
   ```bash
   kubectl apply -f pvc.yaml
   ```

2. Apply the Deployment:
   ```bash
   kubectl apply -f deployment.yaml
   ```

### Step 5: Verify the Volume is Mounted

To ensure that your volume is correctly mounted and accessible, you can describe the pod and check the mount points:

```bash
kubectl describe pod <pod-name>
```

In the output, you should see the `Mounts` section showing where the volume is mounted inside the container.

---

### Example Use Cases

1. **`emptyDir`**: Temporary storage used within the pod, suitable for tasks like caching or processing.
2. **`PersistentVolumeClaim`**: Long-term storage, useful when you need to retain data across pod restarts.
3. **`ConfigMap`/`Secret`**: Mounting configurations or sensitive data directly into the container.

### Conclusion

- **Define the volume in the `volumes` section**.
- **Mount it in the container using `volumeMounts`**.
- **Choose the volume type** based on your requirements (temporary vs. persistent storage).
------------------------------------------------------
How to create aws nfs file location and attach/consume it in kubernetes pods?
How to create aws ebs storage location and attach/consume it in kubernetes pods?
Setup a eks using terraform. deploy spring boot microservice application. create a ingress resource for routing rules. 



## **Many-to-Many Relationship in Spring Data JPA**  

### **Understanding Many-to-Many**  
A **Many-to-Many** relationship means that multiple records in one entity are associated with multiple records in another entity.

📌 **Example Scenario:**  
- **Students** enroll in **multiple Courses**  
- **Courses** have **multiple Students**  

---

## **1️⃣ Define the Entities**  

### **Student Entity**
```java
@Entity
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;

    @ManyToMany
    @JoinTable(
        name = "student_course",
        joinColumns = @JoinColumn(name = "student_id"),
        inverseJoinColumns = @JoinColumn(name = "course_id")
    )
    private Set<Course> courses = new HashSet<>();

    // Getters and Setters
}
```
✅ **`@ManyToMany`** → Many students can enroll in many courses.  
✅ **`@JoinTable`** → Creates a **junction table (`student_course`)** with **student_id** and **course_id** as foreign keys.  

---

### **Course Entity**
```java
@Entity
public class Course {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String title;

    @ManyToMany(mappedBy = "courses")
    private Set<Student> students = new HashSet<>();

    // Getters and Setters
}
```
✅ **`mappedBy = "courses"`** → This **avoids duplication** of the join table in both entities.  

---

## **2️⃣ Define the Repositories**
### **Student Repository**
```java
@Repository
public interface StudentRepository extends JpaRepository<Student, Long> {
}
```
### **Course Repository**
```java
@Repository
public interface CourseRepository extends JpaRepository<Course, Long> {
}
```

---

## **3️⃣ Saving Data (Service Layer)**
```java
@Service
public class EnrollmentService {
    @Autowired
    private StudentRepository studentRepository;
    @Autowired
    private CourseRepository courseRepository;

    public void enrollStudents() {
        // Create Courses
        Course javaCourse = new Course();
        javaCourse.setTitle("Java Programming");

        Course dbCourse = new Course();
        dbCourse.setTitle("Database Management");

        courseRepository.saveAll(List.of(javaCourse, dbCourse));

        // Create Students
        Student student1 = new Student();
        student1.setName("Alice");

        Student student2 = new Student();
        student2.setName("Bob");

        // Assign Courses to Students
        student1.getCourses().add(javaCourse);
        student1.getCourses().add(dbCourse);

        student2.getCourses().add(javaCourse);

        // Save Students (Courses will also be saved)
        studentRepository.saveAll(List.of(student1, student2));
    }
}
```
🔹 **Students and Courses are linked** through the `student_course` table.  
🔹 **`student1` is enrolled in both Java and DB courses.**  
🔹 **`student2` is enrolled only in Java.**  

---

## **4️⃣ Fetching Data**
```java
public void getStudentDetails(Long studentId) {
    Optional<Student> student = studentRepository.findById(studentId);
    student.ifPresent(stu -> {
        System.out.println("Student: " + stu.getName());
        stu.getCourses().forEach(course -> System.out.println("Course: " + course.getTitle()));
    });
}
```

---

## **5️⃣ Generated Tables (SQL Schema)**  
🔹 **Student Table**
| id | name  |
|----|-------|
| 1  | Alice |
| 2  | Bob   |

🔹 **Course Table**
| id | title               |
|----|---------------------|
| 1  | Java Programming   |
| 2  | Database Management |

🔹 **Student-Course (Junction Table)**
| student_id | course_id |
|------------|----------|
| 1          | 1        |
| 1          | 2        |
| 2          | 1        |

---

## **🔥 Key Takeaways**
✅ **Many-to-Many uses `@ManyToMany` on both entities.**  
✅ **A join table (`student_course`) is created using `@JoinTable`.**  
✅ **Using `Set<>` prevents duplicate enrollments.**  
✅ **`mappedBy` is used to avoid redundant mappings.**  

Would you like a **Spring Boot REST API** for this? 🚀
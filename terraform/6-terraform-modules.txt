### **What is a Terraform Module?**

A Terraform **module** is a container for multiple resources that are used together. 
It enables you to **reuse configurations**, **organize your code**, and manage infrastructure efficiently. 
Every Terraform configuration is implicitly a module. Modules can also be nested and shared across teams or projects.

---

### **Benefits of Using Terraform Modules**
1. **Reusability**: Write code once, reuse it across environments or projects.
2. **Maintainability**: Break down infrastructure into smaller, manageable parts.
3. **Consistency**: Enforce standards by using the same module across environments.
4. **Scalability**: Easily replicate infrastructure for multiple regions or accounts.

---

### **Best Practices for Modules**
1. **Use Input Variables**:
   - Allow flexibility for different environments.
   - Use defaults for common values but allow overrides.

2. **Define Outputs**:
   - Make it easy to use module outputs in other configurations.

3. **Keep Modules Simple**:
   - Focus on one area of infrastructure (e.g., VPC, EC2).

4. **Version Control**:
   - Version your modules for reliability and to prevent breaking changes.

5. **Documentation**:
   - Add `README.md` files explaining module usage and input/output variables.

6. **Use Module Registry**:
   - Use the Terraform Registry or private repositories to store and share modules.

---

### **Example: Terraform Module for AWS Infrastructure**

This example creates the following resources using a Terraform module:
- A **VPC** with a public subnet.
- An **Internet Gateway** for external access.
- A **Route Table** to route traffic to the Internet Gateway.
- **NACL** and **Security Groups**.
- An **EC2 Instance** with a static IP, hosting an Nginx server.

---

#### **Directory Structure**
```plaintext
aws-infra/
├── main.tf
├── variables.tf
├── outputs.tf
├── modules/
│   └── vpc/
│       ├── main.tf
│       ├── variables.tf
│       ├── outputs.tf
│   └── ec2/
│       ├── main.tf
│       ├── variables.tf
│       ├── outputs.tf
```

---

#### **VPC Module**

**modules/vpc/main.tf**
```hcl
resource "aws_vpc" "main" {
  cidr_block           = var.cidr_block
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags = {
    Name = var.vpc_name
  }
}

resource "aws_subnet" "public" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = var.public_subnet_cidr
  map_public_ip_on_launch = true
  availability_zone       = var.availability_zone
  tags = {
    Name = var.subnet_name
  }
}

resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id
  tags = {
    Name = var.igw_name
  }
}

resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }
  tags = {
    Name = var.route_table_name
  }
}

resource "aws_route_table_association" "public" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.public.id
}

output "vpc_id" {
  value = aws_vpc.main.id
}

output "subnet_id" {
  value = aws_subnet.public.id
}
```

**modules/vpc/variables.tf**
```hcl
variable "cidr_block" {}
variable "public_subnet_cidr" {}
variable "availability_zone" {}
variable "vpc_name" {}
variable "subnet_name" {}
variable "igw_name" {}
variable "route_table_name" {}
```

**modules/vpc/outputs.tf**
```hcl
output "vpc_id" {
  value = aws_vpc.main.id
}

output "subnet_id" {
  value = aws_subnet.public.id
}
```

---

#### **EC2 Module**

**modules/ec2/main.tf**
```hcl
resource "aws_security_group" "web_sg" {
  name_prefix = "web-sg-"
  description = "Allow HTTP and SSH"
  vpc_id      = var.vpc_id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_instance" "web" {
  ami           = var.ami
  instance_type = var.instance_type
  subnet_id     = var.subnet_id
  key_name      = var.key_name
  security_groups = [aws_security_group.web_sg.name]

  associate_public_ip_address = true
  tags = {
    Name = "web-server"
  }

  provisioner "remote-exec" {
    inline = [
      "sudo yum update -y",
      "sudo yum install -y nginx",
      "sudo systemctl start nginx",
      "sudo systemctl enable nginx"
    ]
  }
}

output "ec2_public_ip" {
  value = aws_instance.web.public_ip
}
```

**modules/ec2/variables.tf**
```hcl
variable "vpc_id" {}
variable "subnet_id" {}
variable "ami" {}
variable "instance_type" {}
variable "key_name" {}
```

**modules/ec2/outputs.tf**
```hcl
output "ec2_public_ip" {
  value = aws_instance.web.public_ip
}
```

---

#### **Main Terraform Configuration**

**main.tf**
```hcl
module "vpc" {
  source                = "./modules/vpc"
  cidr_block            = "10.0.0.0/16"
  public_subnet_cidr    = "10.0.1.0/24"
  availability_zone     = "us-east-1a"
  vpc_name              = "my-vpc"
  subnet_name           = "public-subnet"
  igw_name              = "my-igw"
  route_table_name      = "public-route-table"
}

module "ec2" {
  source         = "./modules/ec2"
  vpc_id         = module.vpc.vpc_id
  subnet_id      = module.vpc.subnet_id
  ami            = "ami-0c02fb55956c7d316"
  instance_type  = "t2.micro"
  key_name       = "my-key-pair"
}

output "web_server_ip" {
  value = module.ec2.ec2_public_ip
}
```

---

### **Commands to Deploy**

1. **Initialize**:
   ```bash
   terraform init
   ```

2. **Plan**:
   ```bash
   terraform plan
   ```

3. **Apply**:
   ```bash
   terraform apply
   ```

---

### **Advantages of Using Modules**
- The VPC and EC2 resources are modular and can be reused for other environments.
- Easy to make environment-specific changes by passing different variable values.
- Separation of concerns improves readability and maintainability.
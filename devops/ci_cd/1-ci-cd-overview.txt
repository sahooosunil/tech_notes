### Continuous Integration (CI) and Continuous Deployment (CD)

**Continuous Integration (CI):**  
CI is the practice of automating the integration of code changes from multiple contributors into a single software project. It involves frequent commits to a shared repository, automated building, and testing to detect errors early.

**Continuous Deployment (CD):**  
CD extends CI by automating the deployment of changes to various environments (development, staging, production). Every change that passes automated tests is automatically deployed, ensuring faster delivery of features.
-----------------------
Sure! Let's break it down in a simple way:

### **Continuous Integration (CI)**

Imagine you and your team are working on a project, and each of you is writing code for different parts. Sometimes, your changes might cause problems when combined with others' changes, like pieces of a puzzle not fitting together.

**Continuous Integration** means that every time someone writes some code, they **immediately** send it to a shared space (like a project folder or a server). Before the code gets added to the main project, the system checks it for errors automatically.

This way, if there are any problems (like two pieces of the puzzle don't fit), they are found **quickly**, and you can fix them right away, before they become bigger issues.

**In short:**
- CI is the practice of frequently integrating your code with others.
- It includes automatic checks to find problems early.

### **Continuous Deployment (CD)**

Now, after you've written your code and made sure it's working well with everyone else's code (through CI), you need to get it out to users. This is where **Continuous Deployment** comes in.

In **Continuous Deployment**, once the code passes all the tests (like the checks from CI), it's automatically pushed to your live website or app. This means that any new feature, fix, or update you write is **instantly** available for users without waiting for manual approval or a big release day.

**In short:**
- CD is the process of automatically pushing the changes to users once they are tested and ready.
- It allows you to deliver software quickly and consistently.

### Putting it Together:

- **CI** is about making sure your code is always working and ready to be added to the project.
- **CD** is about automatically putting that working code into action so users can enjoy it right away.

In simple terms:
- **CI** = "Check my code often to find problems early."
- **CD** = "Automatically share the good code with everyone."
---------------------

### Standard Steps in CI (Using Jenkins for a Java App)

1. **Code Checkout:**
   - **Jenkins Step:** Use the `git` plugin to clone the repository.
   - **Example:** 
     ```groovy
     stage('Checkout') {
         steps {
             git 'https://github.com/your-repo/java-app.git'
         }
     }
     ```

2. **Unit Testing:**
   - **Purpose:** Ensure that individual units of code work as expected.
   - **Jenkins Step:** Use the `mvn test` command.
   - **Example:** 
     ```groovy
     stage('Unit Testing') {
         steps {
             sh 'mvn test'
         }
     }
     ```

3. **Static Code Analysis (SonarQube):**
   - **Purpose:** Analyze the code for bugs, vulnerabilities, and code smells.
   - **Jenkins Step:** Integrate with SonarQube.
   - **Example:** 
     ```groovy
     stage('Static Code Analysis') {
         steps {
             withSonarQubeEnv('SonarQube') {
                 sh 'mvn sonar:sonar'
             }
         }
     }
     ```

4. **Reports (Code Coverage, Test Results):**
   - **Purpose:** Generate reports on test coverage and results.
   - **Jenkins Step:** Use `JaCoCo` for code coverage and publish reports.
   - **Example:**
     ```groovy
     stage('Report Generation') {
         steps {
             jacoco execPattern: '**/target/*.exec'
             junit '**/target/surefire-reports/*.xml'
         }
     }
     ```

5. **Building the Image:**
   - **Purpose:** Build a Docker image for the application.
   - **Jenkins Step:** Use Docker to build the image.
   - **Example:** 
     ```groovy
     stage('Build Docker Image') {
         steps {
             sh 'docker build -t my-java-app:latest .'
         }
     }
     ```

6. **Pushing the Image:**
   - **Purpose:** Push the Docker image to a registry.
   - **Jenkins Step:** Use Docker to push the image.
   - **Example:** 
     ```groovy
     stage('Push Docker Image') {
         steps {
             sh 'docker push my-java-app:latest'
         }
     }
     ```

---

### Deployment Steps (CD)
0. **Modify the deployment file with latest version/tag (jenkins build number) 
This step involves updating the `deployment.yml` file with the new Docker image tag or other relevant configurations.
### Example Jenkins Step for Updating `deployment.yml`:
```groovy
stage('Update Deployment YAML') {
    steps {
        script {
            def imageTag = 'my-java-app:' + env.BUILD_NUMBER
            sh """
            sed -i 's|image: my-java-app:.*|image: ${imageTag}|' k8s/deployment.yml
            """
        }
    }
}
```

1. **Deploy to Development:**
   - **Purpose:** Deploy the application to the development environment.
   - **Jenkins Step:** Use Kubernetes or Docker commands to deploy.
   - **Example:** 
     ```groovy
     stage('Deploy to Dev') {
         steps {
             sh 'kubectl apply -f k8s/dev-deployment.yml'
         }
     }
     ```

2. **Automation Testing / Integration Testing:**
   - **Purpose:** Run automated tests to verify integration.
   - **Jenkins Step:** Use Selenium or API testing tools.
   - **Example:** 
     ```groovy
     stage('Integration Testing') {
         steps {
             sh 'mvn verify -P integration-tests'
         }
     }
     ```

3. **Promote to Staging:**
   - **Purpose:** Deploy the application to the staging environment after successful tests.
   - **Jenkins Step:** Use similar steps as in Dev deployment.
   - **Example:** 
     ```groovy
     stage('Promote to Staging') {
         steps {
             sh 'kubectl apply -f k8s/stage-deployment.yml'
         }
     }
     ```

4. **Manual Deployment in Production:**
   - **Purpose:** Manually deploy to production with approval.
   - **Jenkins Step:** Use `input` for manual approval.
   - **Example:** 
     ```groovy
     stage('Deploy to Production') {
         steps {
             input message: 'Approve deployment to production?'
             sh 'kubectl apply -f k8s/prod-deployment.yml'
         }
     }
     ```

   - **Steps and Approval:**
     - **Approval:** Ensure a designated person or team reviews and approves the deployment.
     - **Manual Steps:** Include any manual checks, smoke tests, or verifications before final deployment.

---

### Summary of Key Steps in CI/CD for a Java App with Jenkins:
1. **Checkout code** from Git.
2. **Run unit tests** to ensure code quality.
3. **Perform static analysis** with SonarQube.
4. **Generate reports** for test coverage and results.
5. **Build a Docker image** of the application.
6. **Push the Docker image** to a registry.
7. **Deploy to development** and run integration tests.
8. **Promote to staging** and ensure stability.
9. **Manually deploy to production** after approval. 

These steps streamline the CI/CD process, ensuring quality, security, and smooth deployment.

----------------------------------------------

### Full Pipeline Step:

```groovy
pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/your-repo/java-app.git'
            }
        }
        stage('Unit Testing') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Static Code Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }
        stage('Report Generation') {
            steps {
                jacoco execPattern: '**/target/*.exec'
                junit '**/target/surefire-reports/*.xml'
            }
        }
        stage('Build Docker Image') {
            steps {
                sh 'docker build -t my-java-app:${env.BUILD_NUMBER} .'
            }
        }
        stage('Push Docker Image') {
            steps {
                sh 'docker push my-java-app:${env.BUILD_NUMBER}'
            }
        }
        stage('Update Deployment YAML') {
            steps {
                script {
                    def imageTag = 'my-java-app:' + env.BUILD_NUMBER
                    sh """
                    sed -i 's|image: my-java-app:.*|image: ${imageTag}|' k8s/deployment.yml
                    """
                }
            }
        }
        stage('Deploy to Dev') {
            steps {
                sh 'kubectl apply -f k8s/dev-deployment.yml'
            }
        }
        stage('Integration Testing') {
            steps {
                sh 'mvn verify -P integration-tests'
            }
        }
        stage('Promote to Staging') {
            steps {
                sh 'kubectl apply -f k8s/stage-deployment.yml'
            }
        }
        stage('Deploy to Production') {
            steps {
                input message: 'Approve deployment to production?'
                sh 'kubectl apply -f k8s/prod-deployment.yml'
            }
        }
    }
}
```
Debugging a full-stack application (Spring Boot microservices + React.js) requires a **structured approach** to identify issues across different layers (frontend, backend, database, and network). Below is a **step-by-step guide** to debugging effectively.

---

## **🚀 1. Identify the Issue & Scope**
Start by understanding:
✅ **Where is the issue?** (Frontend, Backend, API Gateway, Database, or Network?)  
✅ **What are the symptoms?** (Errors, unexpected behavior, performance issues?)  
✅ **Reproduce the issue** to get consistent logs and errors.

---

## **🖥️ 2. Debugging Frontend (React.js) Issues**
### **✅ Common Issues**
1. **React State Issues** – Component not updating correctly  
2. **API Errors** – Incorrect request/response format  
3. **CORS Issues** – Backend rejecting requests  
4. **Routing Issues** – Navigation or route mismatches  
5. **Performance Issues** – React re-renders too often  

### **🛠 Debugging Steps**
#### **🔹 Use Browser DevTools (Chrome/Firefox)**
- Open DevTools: `F12` or `Cmd + Option + I`
- **Console Tab** → Check for errors (e.g., `Uncaught TypeError`, `CORS policy error`, `404/500 API error`)
- **Network Tab** → Inspect API calls (status codes, request/response payloads)

#### **🔹 Check API Calls in React**
If an API request is failing:
```jsx
useEffect(() => {
  fetch("http://localhost:8080/api/data")
    .then((res) => res.json())
    .then((data) => console.log(data))
    .catch((error) => console.error("API Error:", error));
}, []);
```
✅ **Fix API URL, headers, and CORS issues.**  
✅ **Ensure API is running on the correct port (`localhost:8080` or `api.mydomain.com`).**

#### **🔹 Debug React State with `console.log` & React DevTools**
1. Install React Developer Tools (`npm install -g react-devtools`)
2. Use **React DevTools** to inspect component props & state.
3. Add `console.log(state)` in components to verify state changes.

#### **🔹 Use Redux DevTools (if using Redux)**
For Redux-based state management, enable Redux DevTools extension.

#### **🔹 Debug React Query Issues**
If using **React Query**, check logs:
```jsx
const { data, error } = useQuery(["users"], fetchUsers);
console.log("Data:", data);
console.log("Error:", error);
```

---

## **🖥️ 3. Debugging Backend (Spring Boot) Issues**
### **✅ Common Issues**
1. **API Not Working** – 404, 500, timeout, incorrect payload  
2. **Database Connectivity Issues** – Hibernate, JDBC errors  
3. **Authentication Issues** – JWT, OAuth, missing headers  
4. **Performance Bottlenecks** – Slow API responses  
5. **Microservice Communication Issues** – Service discovery, timeouts  

### **🛠 Debugging Steps**
#### **🔹 Check Logs (Spring Boot)**
Use `application.log` or run Spring Boot in debug mode:
```bash
mvn spring-boot:run -Dspring-boot.run.arguments="--debug"
```
Or configure `application.properties`:
```properties
logging.level.org.springframework=DEBUG
logging.level.com.myapp=DEBUG
```
🔍 **Look for stack traces** in the logs.

#### **🔹 Debug API Endpoints in Postman or cURL**
If `http://localhost:8080/api/users` is failing, test with Postman:
```bash
curl -X GET http://localhost:8080/api/users -H "Authorization: Bearer <token>"
```
✅ **Ensure correct request method (GET, POST, PUT, DELETE).**  
✅ **Check request headers & authentication tokens.**

#### **🔹 Use Breakpoints in IntelliJ**
1. **Run in Debug Mode**: Click `Run > Debug` in IntelliJ  
2. **Set Breakpoints** in controller/service layers  
3. **Step Through Code** (`F8`, `F7`)  

#### **🔹 Check Database Issues (JPA, Hibernate, SQL)**
If there's a database issue:
- **Enable SQL logs** to check queries:
```properties
spring.jpa.show-sql=true
logging.level.org.hibernate.SQL=DEBUG
```
- **Test queries manually** in MySQL/PostgreSQL:
```sql
SELECT * FROM users WHERE id = 1;
```
- **Check if tables exist** and **data is inserted correctly**.

#### **🔹 Microservices Communication (Feign, WebClient)**
If `serviceA` is calling `serviceB` and failing:
- **Enable Logging for Feign Clients**:
```properties
logging.level.feign.Logger=DEBUG
```
- **Check API Gateway (if using)** for request forwarding issues.

---

## **🌐 4. Debugging API Gateway & Networking Issues**
### **✅ Common Issues**
1. **Microservices can't talk to each other** (Service Discovery, Load Balancer issues)  
2. **CORS Errors** (Frontend → Backend communication blocked)  
3. **Load Balancing & Routing Failures**  

### **🛠 Debugging Steps**
#### **🔹 Check API Gateway Logs**
If using **Spring Cloud Gateway** or **Zuul**, verify routing:
```properties
spring.cloud.gateway.routes[0].id=user-service
spring.cloud.gateway.routes[0].uri=http://localhost:8081
spring.cloud.gateway.routes[0].predicates=Path=/users/**
```
✅ **Ensure correct `uri` mapping.**  
✅ **Check `404`, `503`, or `time-out` errors.**

#### **🔹 Fix CORS Issues**
If React frontend gets:
> "Access to fetch at 'http://localhost:8080/api' from origin 'http://localhost:3000' has been blocked by CORS policy"

👉 **Enable CORS in Spring Boot**:
```java
@Configuration
public class CorsConfig {
    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**")
                        .allowedOrigins("http://localhost:3000")
                        .allowedMethods("GET", "POST", "PUT", "DELETE")
                        .allowedHeaders("*");
            }
        };
    }
}
```

---

## **🛢️ 5. Debugging Database Issues**
### **✅ Common Issues**
1. **DB Connection Failure** – Incorrect credentials, network issue  
2. **Slow Queries** – Missing indexes, bad query performance  
3. **Data Inconsistency** – Transactions failing  

### **🛠 Debugging Steps**
#### **🔹 Check Connection in `application.properties`**
```properties
spring.datasource.url=jdbc:mysql://localhost:3306/mydb
spring.datasource.username=root
spring.datasource.password=admin
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
```
✅ **Run `telnet localhost 3306` to check if the database is reachable.**  

#### **🔹 Enable SQL Query Logging**
```properties
logging.level.org.hibernate.SQL=DEBUG
```
✔ Check slow queries in MySQL:
```sql
SHOW PROCESSLIST;
```

---

## **🛠️ 6. Debugging Performance Issues**
### **🔹 Use Actuator for Monitoring**
Add Spring Boot Actuator:
```xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>
```
Enable useful endpoints:
```properties
management.endpoints.web.exposure.include=health,info,metrics
```
👉 Check `http://localhost:8080/actuator/metrics`

---

## **✅ Summary**
| **Issue** | **Debugging Tool** |
|-----------|------------------|
| React Errors | DevTools, console.log() |
| API Issues | Postman, cURL |
| Spring Boot | Logs, IntelliJ Debugger |
| Microservices | Feign/WebClient logs, Actuator |
| DB Issues | Query Logging, Manual Queries |
| Performance | Actuator, Profiling |

By following these steps, you can systematically **identify, analyze, and fix issues in your full-stack application**. 🚀🔥

Would you like **real-world debugging scenarios**? Let me know! 🚀